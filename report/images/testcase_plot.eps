%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: testcase_plot.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Yutaka Tsutano
%%CreationDate: 12/10/10
%%BoundingBox: 0 0 675 455
%%HiResBoundingBox: 0 0 675 455
%%CropBox: 0 0 675 455
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 88 8%%BeginData: 9910 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8A8FD84FF7DFFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8A8FFFFFFA8A8FFFFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD84FFA8A8FD86FFA8%FD77FFA8A8FD07FFA8FD7EFFA8FD77FFA8A8FD86FFA8FD77FFA8A8FF7DA8%7DA8FFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD%07FF52A85252FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFA8FFFFFFA8A8FFA8FFA8FD82FFA8FD77FFA8A8FD07FFA8FD19FFA9%A9FD06FF7EFD5CFFA8FD1BFF7EFD06FF85FFFFA8FD51FFA8A8FD1BFF84A9%FD04FFA8A9A8FD05FF7EFFA984FD59FFA8FD14FFAFA8FD04FFAFFFA9FFAF%A9FFA8FFAFFF7EFD51FFA8A8FD05FFA8FD15FFA8FFA8FFA9FFA8FFA8FF84%A9A8A9A8FFA8A9A8FD6DFFAFFFAFFFA9A8FFFFAFFFA9A9FFFFFFA9FFA9AF%A9FD4FFFA8A8FFFF7D527DFFA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8A884FF84FF7E7EA8FF84AF7EA884FFA8A9A8A9A8A8A8FF7EA9A8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FD08FF7DA87DFFA8FD12FFAF7EFFFFA9A8A97EFFFFAF%A9A97EA9FFFFA8AFAFFFA8FFFF84A8FD4BFFA8A8FD19FFA8FFFFFFA8A9A8%FFFFFFA8AFA884A8FFA9A9A8FFFFFFA8FF84A9FD53FFA8FD12FFAFFD04FF%A8FD05FFA9FFA9FFFFFFA8FFFFFFAFFFA9FFA8FFA9FD49FFA8A8FD0FFFA8%FFA8A9FFFF7EFFFFFFA8FFFFFFA984A8FFFFFFA8A9A8FD04FFA97EFFFFFF%A8AFA8A9FF84FD51FFA8FD07FFA9A9FFA9A8FFA8A9FFFFA9FD05FF7EFD05%FF84A9FD04FFA9A9FFFFFFA9A8FFA9FF7EFD49FFA8A8FD05FFA8FD08FFA9%84FF7EA9FFA984FFA9A9A8FD04FF84A9FD04FFA984FD09FFA8A9A8AFA8A9%A8FD58FFA8A9FFA9A9FFA9FFA9A9A8FD05FFA9FD05FFA8CAFD09FFA9A8FF%A9A9A9FD05FFA9A9FD42FFA8A8FD0DFFA9A9A8FF84FFFFA9A9A97EA9A9FD%04FFCAA1FFFFFFA8CAA1FD05FFA1CAFFFF7DA8FFA984FFA8FD04FFAFA8FD%45FFFD04A8FFA8FD06FFAFA8FFA8A9A8FFA8FF7EA984FD04FFCAA8CAA8FF%FFCAFFFFA8FFFFFFA1FFA8FFA8A27DFFA8FFFFA9A9FFFFFFA8AFA9FD41FF%A8A8FF27A82752FFA8A8FFA8FFA8FF7EFF8484A8A8A8A9A87E84A8A8FFA8%A8A1FFA8A1A8A1A8FFA8A1A8A8A1CAA8CAA1A184A8A1FFA8FF84A8A8FFA8%A8A8A97EA9A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FD0AFFA8FD09FF84FFA9FFAFFF7EFD05FFA8FFFFFFCAC9CA%FFFFFFCACAA8FD05FFCFFFFFCACAFFA8FFA9FFFFFFA9FFA9A9FD40FFA8A8%FD0DFFA8FFA8FFFFAFA8FFFFA9A8FFFFFFA1CFFD0AFFA8FD0AFFA1A7CFA1%A8A2FFA8AFA9A984FFFFFFA8FD44FFA8FD05FFA9FD04FFCAA8A8A8FFFFCA%A1FFFFCAFD1AFFA8A2A2AFFFFFA8A9A9FFAFA9FD3CFFA8A8FD05FFA8FFFF%A8A8FFFFA9A8FFFFCAA8A17DA8A8FFA8FFA1CACAFD1CFFA184FFA9A976A8%FFFF7EFD37FFA8FD0EFF84AFA9FFA9FFFFFFA7FFA9FFFFCAA7FD21FFA2A8%FFFF7DA8A1FFAFA9FD37FFA9A9FFFFFFA8A8FD08FFA97E84FFA9A9FFA8CA%FD04FFA8CAFD22FFA1CAA8A1A8A8A1CB7EFFFFFFA8FD33FF7EAFFD0BFFA8%FFA9AFA9A9A1FFFFCAFD2AFFCAFF84AFFFA8A1A2A9FFA8AFFD33FFA9A8FF%FFFFA8A8FFFFFFA8FFFFFFA8A9FFFF7DA8A1CAA1FD2CFFA9A8FFA8A9A8A1%A1A1A8FD33FFA8A9FD08FFA852FFA8CAA8FFA8A285CAA1FFFFFFA8FFA8FF%A8FFFFFFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FF84A9CFAF7EFFA8FFA1A8FFFFA8FFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8FF%FFFFA8FFA8FFA8FFA8A9A8FFFFFFA8A8FFFFFFA87DFFA8A8A1FFA8A8A9A8%FFAFFFFFFFA8FFA8FFA8FFFFFFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFFFA9A8FFA884A8A9FFA87DFFA8FFCF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8FFA8FFFFFFA8FFA8FFA8%FFFFFFA8FFA8FFA8FFFFFFA8FFA8FFFFA9A8A9A8FD0AFF7DA8A8CAA8FFFF%A852FD05FFA87D7DFD05FF5252FD05FF7D27FD05FF7D52A8FD04FFA85252%FD05FF5252FFA9FFFFFF52527DFFA8A2CFA1277DFD04FFA8527DFD05FF52%527DFD04FF7D27A8FD04FF7D5227A8FD04FF527D7DFD04FF7D527DFFFFA8%FFA9FFFFFFA8A8FD06FFA8A8AFA8FFFFFFA87DFD06FF7DFD05FFA87D7DFD%05FF7D7DA8FD04FFA87DFD05FFA87D7DFD05FF7DA8FD05FF7D7C7EFFA97E%CAA87D52FFA8A8A8FF52A8FD04FFA87D52A8FD04FF7D7DA8FD04FFA87D7D%A8FFFFFFA8A87DA8FD04FF7D7DA8FFFFA9A9A8A8FD0CFFA9FD39FFA9FFA8%FD04FFA2A8A8A8CAA8FD21FFCFCACAFD05FFA9FFA1FFFFFFA8A8FD07FFA8%FD3BFFA8A9A8FFFFFF7EFFA9A9FFCAA1CAA1CAFD06FFCAFD13FFA8CAA7A8%A8CAFFFFA1FFFFA8A1A9FD0BFFA8A9FD3AFFAFA9A9FF84FFFFA9A9AF84FF%FFCAA8FFA7FFFFFFA1FFCAA8A8FD12FFCACAFFFFFFA8CAA8CAA1A8A1FD05%FFA8A8FD06FFA8A8FD3BFF7EA9A88484FFA8A9A8A9FD05FFCAA8FFA1CAA1%CAFFA8A8FD10FFCA7DFF7EAFFF84A8FFFFAF7DAFFD0DFFA8FD3CFFA9A9AF%A8FFA9FFA9AFA8FFA8FFFFFFCFCAFFCAFD04FFCACFFD04FFA8FD08FFCAA1%AFCAA984A9AFFF7EFFFFFFA985A9FD05FFA8A8FF7DA87DA8FFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF84A9%A885A9A97EA9A8A984AFFFFFA1A1A8FD05FFA1FFFFCAA1FFA1A8CAFFA8FF%FFFFA1A852CAA87E7EFFFF84A8FFFFA97EA9FD07FFA852A85252FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFCA%A9A8FF7EFFA8A9A8A9A8FFA8FFFFA9A8FFA8A8A8FFFFCAA1CAA7FFA8FFA8%A8A1CAA1FFA1FFA8A8A8AFA8A9A8FF7EA9A8A9A8A884FFA8FFFFFFA8A8FF%A8FFA8FD41FFA8FD06FFA984FFA9A9FFFF7EFFFFAF7EFD04FFCAA8FD08FF%CAA1CAFFAFA9A984FFA9A9A8A9A8FF7EA9A8FD54FFA9A9FFFFA8FFA9A9A9%FFA9AFA9FD11FFA9FFA8A9FFFFA8FFA9FFA9A984FD07FFA8A8FD4CFFA984%FFAFA9FFA9A9A984A9FFA9FD0EFF7EFFFFA9AFFFA9FFFFA9A8FF84A9A8A9%FD0FFFA8FD45FFA9A9FFFFA9FFA8FF84A9A9FFA9FD04FFA9AFFD08FF85FF%FFA8FD05FFA9A9FFFFAFFD09FFA8A8FD07FFA8FD44FFA97EFFA9A9A8A9FD%04FFA8A9FD04FF7EFF7EFD07FF7EFFA8A9FD05FFA97EFD14FFA8FD45FFA9%A9FFFFA9FFA8FD05FFA9FFFFFFAFA9A9A9FD06FFA8AFA9A9FD06FFA9FD0D%FFA8A8FD4DFF84FFFFAFA8A9FD05FFA9FFFFFFA9A8A97EFD06FFA9A8A9A8%FD1CFFA8FD45FFA9AFFFFFA8FFA9FD05FFA8FFFFFFA8FF84A9AFFFA8FFFF%FFA9FF84FD15FFA8A8FFA8525252A8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8%7EA9A8FFA8FFA8A8A8FF7EA9A87E84A87E8484FFA8A8A884A8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FD08FF7DA87DFFA8FD49FFA9A9FD06FFA8FFAF%A9FFFFA9FFA8AFFFA9FFFFA9FF7EFD15FFA8A8FD51FF7EFD06FFAFA8A9FD%04FFAF7EA8FFA8FFA8FFFF84A8FD1CFFA8FD4AFFAFFD06FFAFA9FD06FF84%FFFFFFA8A9A9FF84FD15FFA8A8FD07FFA8FD57FFA9FD05FF84FFFFA9A9FD%1CFFA8FD77FFA8A8FD86FFA8FD77FFA8A8FD05FFA8FD7BFFFD04A8FFA8FD%77FFA8A8A827A85252FFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FD0CFFA8FD77FFA8A8FD07FFA8FD7EFFA8FD77FFA8A8FD86%FFA8FD77FFA8A8FD05FFA8FDF8FFA8A8FD83FFA87DFFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8A8FFFFFF7DA8FF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD86FFA8A8FD%B6FFA9AFA97D527D527DFFFFA8CACAA1527D527D52A8FD34FFA8A8FD35FF%A8FFA9FF7D7D527D7DFFCAFFA8FFA87D5252527DA8FDB4FFA8A8FFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD07FFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD08FFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FD7FFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-12-10T08:52:32-06:00</xap:CreateDate>
         <xap:ModifyDate>2010-12-10T08:54:12-06:00</xap:ModifyDate>
         <xap:MetadataDate>2010-12-10T08:54:12-06:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>176</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAsAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9M6fp9g9hbM1tEzNEhZi&#xA;ikklRudsVQsUlsX1MTaOI47C5W3hcIn79Gghl9VOYjHEPM0Z3O6n5BVE/V7X/q0/8Lb/APNeKu+r&#xA;2v8A1af+Ft/+a8Vd9Xtf+rT/AMLb/wDNeKu+r2v/AFaf+Ft/+a8Vd9Xtf+rT/wALb/8ANeKu+r2v&#xA;/Vp/4W3/AOa8Vd9Xtf8Aq0/8Lb/814q76va/9Wn/AIW3/wCa8Vd9Xtf+rT/wtv8A814q76va/wDV&#xA;p/4W3/5rxV31e1/6tP8Awtv/AM14q76va/8AVp/4W3/5rxV31e1/6tP/AAtv/wA14q76va/9Wn/h&#xA;bf8A5rxV31e1/wCrT/wtv/zXirvq9r/1af8Ahbf/AJrxV31e1/6tP/C2/wDzXirvq9r/ANWn/hbf&#xA;/mvFXfV7X/q0/wDC2/8AzXirvq9r/wBWn/hbf/mvFXfV7X/q0/8AC2//ADXirvq9r/1af+Ft/wDm&#xA;vFXfV7X/AKtP/C2//NeKu+r2v/Vp/wCFt/8AmvFXfV7X/q0/8Lb/APNeKu+r2v8A1af+Ft/+a8Vd&#xA;9Xtf+rT/AMLb/wDNeKu+r2v/AFaf+Ft/+a8Vd9Xtf+rT/wALb/8ANeKt39hYrp9w62sSOInIIRQQ&#xA;QpPUDFURpv8AxzrX/jDH/wARGKu1H/eOT6P+JDFURirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdiqH1L/jnXX/GGT/iJxVC2+p6baWmnQ3d3DbzXMQFt&#xA;HLIqNIY4w78AxBbiu5p0GKrE1vRdW06eXSr+21CKMoJJLWaOZVLhXUExlgKqwYexriqa4q7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqh9S/4511/wAY&#xA;ZP8AiJxVLD5c0nUxouo3cbNeaZETZypI6cfWjUPUKQG+wpFehAOKobT/ACX5b8v6beQ6XaCKK5aJ&#xA;pUdnlBMSrEn94W6KvXFU8/Runf8ALLD/AMi1/pirv0bp3/LLD/yLX+mKu/Runf8ALLD/AMi1/pir&#xA;v0bp3/LLD/yLX+mKu/Runf8ALLD/AMi1/pirv0bp3/LLD/yLX+mKqc1npEKc5YII0LKnJkQDk7BV&#xA;G47sQBhAJUlU/Runf8ssP/Itf6YFUJodGhnggkt4RLcsywr6a7lFLt27AZIRJBPcglX/AEbp3/LL&#xA;D/yLX+mRS79G6d/yyw/8i1/pirv0bp3/ACyw/wDItf6Yq79G6d/yyw/8i1/pirv0bp3/ACyw/wDI&#xA;tf6Yq79G6d/yyw/8i1/pirv0bp3/ACyw/wDItf6Yq79G6d/yyw/8i1/pirv0bp3/ACyw/wDItf6Y&#xA;q79G6d/yyw/8i1/pirv0bp3/ACyw/wDItf6Yq79G6d/yyw/8i1/pirv0bp3/ACyw/wDItf6Yq79G&#xA;6d/yyw/8i1/pirv0bp3/ACyw/wDItf6Yq79G6d/yyw/8i1/pirv0bp3/ACyw/wDItf6Yq79G6d/y&#xA;yw/8i1/pirv0bp3/ACyw/wDItf6Yq79G6d/yyw/8i1/pirWogDTboAUAhcAD/VOKt6b/AMc61/4w&#xA;x/8AERirtR/3jk+j/iQxVEYq7FXYq7FXYqk+iXt3JPIlxJ6kdyJbi0JpVUEzKUqKVUIYyPn8suyR&#xA;FbdP1f2sIkrtXgg1G4tdOkPK3kE003E9ViURUBHQh5gw91wYyYgy/H42WQvZ1vrJj03SZbgc5b5o&#xA;oJWBoBK0bFjTf9tKYTj9Uq6KJbBC3TfWddtb0bwWE/1WJuxklR1m+gEov+sCMlHaBHeL/Ug7m1TS&#xA;JpP8Q6wjN+6maOSBfeKNYpf1LgyD0RWP1FPMobHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FUPqX/ABzrr/jDJ/xE4qlmqRa5L5QaPQZlg1drWMWcz8aK1Fr9tJVrStOSEV6jFUv0i287&#xA;xWmq/wCIby2n5zRHT/RSqpEI0EgICxE8pAW+Ik7ntTFWR+nqP+/4f+RLf9VcVd6eo/7/AIf+RLf9&#xA;VcVd6eo/7/h/5Et/1VxV3p6j/v8Ah/5Et/1VxVA6rPrcK28dpLbtc3EvCMPE4X4UaUgkSGgIj41p&#xA;3yzHEG75MZE9ELFZahYjRFaWL1I1Nm5ETEANDzap9TerwL9OSMuLi+f2/tQBVIPylZ6wGeZ3RYGh&#xA;jltZHjZg31om4lH21+y7UyzUEch+K2Y4wUNqf1tNPh5TR8dPvbm7IEbVC2skkm/xn4eLDJQ+o+YA&#xA;+aJcvcUxWDUE0GxdpIxI89rM49NqiS4uEZ6n1N95D2yq/WfcfsDL+ENDT7u402e5WSIXcE929vJ6&#xA;bBldLhtgwk2VvSWo8OuHiqQHSh9y1Y+a6+1DVGvdJENwiwyETz8Y2Hwyj0o0cepuGaQn/Y4IQFSt&#xA;TLcJ36eo/wC/4f8AkS3/AFVyhsd6eo/7/h/5Et/1VxV3p6j/AL/h/wCRLf8AVXFXenqP+/4f+RLf&#xA;9VcVd6eo/wC/4f8AkS3/AFVxV3p6j/v+H/kS3/VXFXenqP8Av+H/AJEt/wBVcVd6eo/7/h/5Et/1&#xA;VxV3p6j/AL/h/wCRLf8AVXFXenqP+/4f+RLf9VcVd6eo/wC/4f8AkS3/AFVxV3p6j/v+H/kS3/VX&#xA;FXenqP8Av+H/AJEt/wBVcVd6eo/7/h/5Et/1VxV3p6j/AL/h/wCRLf8AVXFXenqP+/4f+RLf9VcV&#xA;d6eo/wC/4f8AkS3/AFVxV3p6j/v+H/kS3/VXFWtRr+jbqu59F6kbfsnFW9N/451r/wAYY/8AiIxV&#xA;2o/7xyfR/wASGKojFVG+ultLK4um3WCN5W+SKW/hkoxsgIJoJRca3cfVNCnQBH1CWD6wo3CpJGS3&#xA;/Dsq5aMYuQ7rYGWw81S+vLr/ABFYQRuUtoyRcr2dpopWQf7H0f8AhhgjEcBPX+z9aSfUFcyR3Os2&#xA;rRsskMVs8wZTVSZmRY2BG32VfI1UT708yo+bZWt9Cnu0+3aNHOCNyAkil/D9iuSwC5gd6MmwtMrO&#xA;AW9nBANhDGkYH+qoGVSNklkBskqwofNM9lMvqQy281yFO68ZRDCVPjvG/wB+X3+7sd9feWFeqk31&#xA;G0N1Yy26MEdl/dN2V1PJDT2YDKYSo2zIsKWiQ3EWlW6XUfpXBUvPFUMFdyWYVG2xbJZCDI1yREbJ&#xA;BZ76cJK7WsWlwyfO2m5v+DZfLn7+L7Q1jl8kz0u6nfX9UR3Jgb0/qq9h6Q9OX/h6ZVOI4AzidynR&#xA;IAqemUs3Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUPqX/ABzrr/jDJ/xE4qkd35t03Rn0&#xA;HTbmOWS51aF/qvphOI+rRK78y7p15AClfE0AJCqE8vfmDo3mvSb640+C5iS0eFJBMsbFvWRZVZDA&#xA;86stGpyBpUbbb4qyf6/B/LN/yIm/5oxVLtav4ZoUsEjmeW7dQyejKKQK6+uxqvQIafMjLce3q7vw&#xA;GMu5JDdxP6CBZOGnS8H/AHUhoDqKcP2diI7c/fl3++/4n9rX+j9aI1bU4oIdS1ALJytryAxsYpAO&#xA;KxxodytBQyN1yOMWRHvB/SmRqyu8ot9UW6gmjmH1P07KP91Kfgi5Sp0U0+C4A3x1EgaPfv8Aj5Lj&#xA;FI/V9TS4/wBxVvG7TXK1uGeCVligNQXZeIJLUKp779AcxeIg7c3JjAVcuX3utPMMUMN0mpOyzWLH&#xA;1ZRBKoaJ94pOPE05D4f9YGmREu/omWOyOHqgHuriKeLX7r14pOQiktGikCRWcjAfF8NPUU8ZHavY&#xA;qMbPNmBE+kfPz/Uml/5gjj5W1nFLcagVBSH0ZeKBqhXlPEcUqPme1cJl3c2uEL3O0fxyQJ8wHSWl&#xA;g1Gea7ZohJZO8BikmlHwvCqqiLXlx4/63tkeLh5tnhie8RXf5eaU6Pd3Zs9b024gaK9vJbqawKpK&#xA;0ZKgRhKlA37tgtSR0P0ZlHJ648XcHHOMcJMe/qnUTx2NxphYyySN68M7+jKAZLj/AEh2AK95Ith7&#xA;4mXED8Ps2YVVInXL+E6TcxKswedPQQ+jKPimIiXqvi+RxfUEz5KGl6rY2g+olZlBuZorZBFKQqgG&#xA;UKKioAToO3yyUwTv5Iia2Tb6/B/LN/yIm/5oylm76/B/LN/yIm/5oxV31+D+Wb/kRN/zRirvr8H8&#xA;s3/Iib/mjFXfX4P5Zv8AkRN/zRirvr8H8s3/ACIm/wCaMVd9fg/lm/5ETf8ANGKu+vwfyzf8iJv+&#xA;aMVd9fg/lm/5ETf80Yq76/B/LN/yIm/5oxV31+D+Wb/kRN/zRirvr8H8s3/Iib/mjFXfX4P5Zv8A&#xA;kRN/zRirvr8H8s3/ACIm/wCaMVd9fg/lm/5ETf8ANGKtaia6bdHxhfrt+ycVa0+NG0+zLKGKwpxJ&#xA;FaVQA0+jFVt3BDDYyLFGsanjVUAUbEAdPYAYqrJeW73ktmrVuIY0lkXwWQsF/wCTZyXCatF70hj8&#xA;Wup/xVat/wAlZF6f8isl/B8UdUo1uax0u31NYYJpZJSt9eSxhWWGpCozVIbjWEmihqbk7YBm9QB6&#xA;MxhuJI6rbWbTta0W/t2dokuHkumkljdA0BmYxyrz41UpGPl92SGXhkD3BBwmvefejrfzDIiiTUrZ&#xA;rWK4VZbNkDyllbpG/Bdpv8nvWgrQ5jife3nD/NN9/wCO5FaNbTJFJd3K8by9b1ZlPVFpSOL/AJ5r&#xA;sf8AKqe+GI6sMkhdDkFafS7C4u4byaEPcW/905rtvUbVoSD9mo27YTEXaBMgUORV5oYpoXhlUPFK&#xA;pSRG3DKwoQfmMJYg0bCjYaba2Mbpbhv3jc5HkdpHY0Cjk7lmNFAAqemACmU5mXNEOiOAHUMAQwBF&#xA;aEGoP0YWFoTVLB7uFDDIILy3b1bScjkEcAj4lqOSspKsK9D2O+RkLZ450d+RSq80DVIlSTTrkT3J&#xA;aJ7j6478XkikDiRSofhUckKqtOJHTiMMLib5spTjIUdu6vuUbXU9TvLtNK1SOKK/gu4nlW3LGNoF&#xA;jMySKX3IMsfH/ay6FUT5fj7GrJHcVyKD1O7gtvNNmJG4kag/o7EislvawkGmyg/WDue/ucsEwIUe&#xA;o/SWAxykSQOTILzUZYde02yB/dXUdwZBQfajCFN+vTllcYXAnupSdwEzypm7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq0zopUMwUseKgmlTStB92NKoal/xzrr/AIwyf8ROKu03/jnWv/GGP/iIxV2o/wC8&#xA;cn0f8SGKsf1LR77UdVvpLOc25oLSeVTRgvpJOvH350B/yWOZUMgjEWL6/oapRJJp2i+aLG91R7iU&#xA;NbR3Fnb+hLMOCOymZpArE7U8GoSASKjfMecgBXmd+/k5Awnn1obdQmejwx3llcXdwgkTVWaQxuKg&#xA;25X04lIPZogCR4k5XA9WWb+b3fgq+paNZ6gipKXj4o8RMR4kxSUDxnY/C3EVxlG0Y8hjyR2Sa3Yq&#xA;7FXYq7FXYq7FXYqlV7obS6qurWlwbe/SD6sKqHiePnz4yIaEip/ZYH3xPLZnGQ67hjs2h3Oo+YtV&#xA;gvJEFzcWSlGj5cEHOPhSvxV5QVJ/5py4R9Fy67fD8FiclSqPTf4rV1m/Gqafd6tFFEloUhnuo5C0&#xA;ayO1xbMXDLHwDOh8QNsFmESJcj1+RSYRmbhd9345sh07zHaahq8tnaOJIYoBKX4spJL0BXlTkhWh&#xA;DDY5AAGNjvROMomj3JxkUOxV2KuxV2KuxV2KuxV2KuxV2KuxVIvMEj/pHSkU0WGdZ3p4tIlso+n6&#xA;w33ZfiHpl+PP9DXPmE11L/jnXX/GGT/iJyhsdpv/ABzrX/jDH/xEYqxq68s22hWXmbVbQ3F3canJ&#xA;9fktQ4jJkiX4Y0aJQ3xfZqamlB2xVRs7LU1a+jsIZkhvnCws1xKGtJfQjDtLyfkw7qOtRTYHYTBA&#xA;AHd8m6Eoy3lzH2/j7lHzDp8PlfSvrFpptzrUEt5awRabFJL+6jduHP4RKWCOxcbdaCo65ZOVgCuT&#xA;SCRIm+bMP0fB/NN/yOm/5ryCpFrF7f2Wt2NjZ6Zc3sF0YxNdfWrlEiVpQsh+FZFLInx0Zlr0riqf&#xA;fUIP5pv+R83/ADXirEbbzHfyedW8vnRrv6iZZ0OrrdXRiX0YIpVqjRoBz9Qrs5Wo2YmoVVl31CD+&#xA;ab/kfN/zXirEPJHmW/8AMF/qNpe6Le6VHZbxXMtxdss1Z5Y6L6sVt+zErildmANCCMVZFrQGn6Re&#xA;XsNveX01vC8kdlbTSmaVlWojjq/2mO2KobyzcS6tpS3d3ZXWmzF2T6tNPOW4qaBqt6Z+Ie2Kqfmu&#xA;9k0bTY7q006/1aaS4hh+r2k0xZVdvikejMQigb0B8PfFVTyrdNrfl2w1a6s7rTZ7yISyWMs85eIn&#xA;9klvTb3FVHyxVLvOGs6lo11p1vpmj3ervei4Ysl1cxRxvCq8EkZEn/vTIeJIAFMVTmPRFGtT3heX&#xA;0ntoYU/fSV5JJKzb8q9HGWGXoA8/1Ma3t5/r2tano/nC+02PQr6602a50+X9KrNOIoojznmagRg3&#xA;CSJqkv8AtE1HHecZ3Q94+ezExqyyS9SO188RXAS4kgaza2uDC08jqQwlVjwLOetOI8a5XIVAHz/H&#xA;4826B4rj8v0/jyQGj+dLu787v5avdDvLBJBNJb3ct3cMSkUcbIzR8FRRJzcDjK1Ch9shHcHyWceH&#xA;zDLg+lubiO3uGuLi2B9W3juZGkBH7JUOSD2wAhTAgWQknkLWrzzHpBvNQ0e+0SReIW3ubi4Z2BWp&#xA;NWEXQ+3vhYo3zjeS6H5av9Vs7G71W5tkBjsLe4nWWQs4T4SPUI4huVeJ6Yqp+TtTn1/Spb290270&#xA;iaO5ntvqs89wWZYXKCQFxEaNT+X6TiqzznqdxoVnYz2Wm3eqyXV5HavFDcXK+kjo7etJ6aztwUoA&#xA;fh7/AEYqm+m27XGnWtxdRTWl1NDHJPa/WZn9KRlBaPlVOXEmleI+WKsT86ea9U8v6kbey8vX+rxi&#xA;29dJ4rm6WN5GWdjD8McwDr9WXqfsvXsAyrLNNiS8061u5I7i2kuIY5Xt3mm5Rs6hijVZTVa0O2Ks&#xA;W1fzPqun6zLZx+X765gW7t7RLpLm64Okxh5TIFjdfgFwS1WA+AitcVZl9Qg/mm/5Hzf814qxDy95&#xA;k1HUtWFjPol5Zwkp6ty9zdERu9uZijB44hsRxqGI3G/KqhVMdXtIEn1CUvIFtbe0n5GaT4eE8sjV&#xA;JbwjB3y+BoD4/cwIs/JPL5BHpVwgJYJA6hmJZjRCNydycoZrtN/451r/AMYY/wDiIxVrUSBZSE7A&#xA;Uqf9kMVUdDBawFwRT628lyB0IWViyV9+BFcsy867tmMeSPytk7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYqpXdulzaTWz/YnjaNvk4Kn9eGJo2giwxS31R0Das685kZ0aOtKuthHKY6+PqIwrmWYfw/j6moS&#xA;6/jkrawtrqd9o18VYJGiyAqzRuBeyRQgckKsOprvlQxiiDz/AFNgyEEEL9F02xvF1OH0vQFpfSJY&#xA;yw/BJEqRxpyjbtV1avY965DNjAEfczx5pWTz3V7qPzMlu15NOgbTlaRIbetLvjuxlBHwckBCqK0Y&#xA;1qaDMc8XPuciJx3QH1fYmV7q0cENu8ETXcl2QLeGIqGdePNmBcqoAQV3Pt3yRk1Rx2Te1IS48xMq&#xA;GaGynNvBRr6adHtxFHX4yokUNIVHxfDtQfa6AgzZjD0JF9Oqcggio3B6HJtDsVdirsVSzU9TkivL&#xA;WwtpYorm4qzSTKXVUGyjirRks7bL8XZvDBuTQbIgVcuSUXU88mjXutSai5nsDMIBAphgV7ZmQ1i5&#xA;yeoHK78mOx+Hicn4EjIC9yozwA2Hp696ZfpHXpFFxHYLBBEgM8Fw4WV2O7CNkLqoTxYfEf5RuagZ&#xA;HoyMYDmUosoZfNUd7POWtNMuViUW6kGV6wiRDIwqAF9UNxHU9TQEG6QlEixy6fH9jWJRAPCbJ6/q&#xA;ZPqX/HOuv+MMn/ETkGLHbvUvN0F5odrpOmpNpUtux1G/kKsY2EVYlRPVib7Q3NDX7O1eQVQ3lrU/&#xA;POoaNft5n0yCymVoRaIgMXON40aTmvq3VGWQkUDU7VNCcVZUH1AAAQQgDoPVb/qlirfqaj/viH/k&#xA;c3/VLFXepqP++If+Rzf9UsVd6mo/74h/5HN/1SxV3qaj/viH/kc3/VLFXepqP++If+Rzf9UsVd6m&#xA;o/74h/5HN/1SxV3qaj/viH/kc3/VLFXepqP++If+Rzf9UsVd6mo/74h/5HN/1SxV3qaj/viH/kc3&#xA;/VLFXepqP++If+Rzf9UsVd6mo/74h/5HN/1SxV3qaj/viH/kc3/VLFXepqP++If+Rzf9UsVY9qmk&#xA;Xsa2sdvAhWbVBdzgSMf7wN6gP7sUU165k48l3f8ANpqlHu724dK1gz6lB6MaR8YvqMzOSFIlknHH&#xA;93uEdwKbbAYDkFA/P7kiJ3QltBqqS/UZoxb3F5PHcTLHOysGkE8zUdE8YiNvD3yciOY3AH6gxAPJ&#xA;PNLl1RRdwSBJTbzlOcsx5UZEkG4i8HyjJ0PeGyKWaALpLVdT5QTada27wWB5ujRwI558qxmppGi1&#xA;/wAmvfK/BMZcJb55hKNjrufx804sL+71GwS4FrGqTKRJDJKwZWBKujj0+qkEHJThwmmmMr3S21vP&#xA;MFtbppEdkHvIf3Md3I0hg9JR8EzPwo3w7FeXIt7b5SCRs5MoxJ4r2+33fjoiP0XrEPGW0nb6yKF/&#xA;XupJY5fENG0fFK/8VhafLbDw9zDxAdiBX4/G66XVPMUMbTy6TH6CEB0juGkmp3dUWI8gPCvLwFds&#xA;bPckQidgd/sS+9vbjV0ubi3kC6fY27OLi3uJEVpyOQYMEUP6IT7J+Grb7jYxHGaCT+6G438+79qT&#xA;2el6yIYdOlZbnWbVluEmkciq20NbYBeNeCvNQ1O7cszIbEyP8Ti5JcQEQKpHtY3segXmkGKNx9Zt&#xA;7dz6hqxkWB5P2KfFyYk4eP1iXkf0sK9JCK1DzBcLpMNuYkE1/YySQyCRiA3pVUGsf2mqSB7HIQxH&#xA;ivukkz2+CI8s2Wo2MF7F9XjVDdymINIy/uwFRKfuzUBUG+Rzz4iPcyxirTjUa/o26rsfReoG/wCy&#xA;cpZt6b/xzrX/AIwx/wDERirtR/3jk+j/AIkMVRGKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KpDc7+b7ZD/vlJl/55i4jP/J8ZfH+7P47v1NZ+r8ebr7aLW4O9zJCopUH/SI44Nqf6uMf4T3f&#xA;o3U9XTaZqzy3llCsMWlXEgZ2epZo5FRZY4wv2fsuat15fThE47E/UpieXRH6aAt5qaDYfWVdV7Ue&#xA;CIk/S3LK58h7v0llHmV13qkVtqNhYsvKS/aQIa/ZESFyenyH04IwsE9ymVEBU02/h1Cyju4f7uXl&#xA;xrQ/ZYr2+WCcDE0UxNi0RJIkcbSOeKICzMewG5ORASxi31B5vKRjvpFS+vmmt/SYgMWnmZQig9eK&#xA;yDpmUYVk25Bq4rjvzZAbC1OoLqHD/SliMHP/AIrLB6H6RmPxGq6Nlb2lExB8zLZruzNFeyDwjWKS&#xA;LlX/AIyKgy4fRfwYH6qat/LMj20cd9IvO3+qJAYqmkdmxIrULvIGYNTscTm328/tUQ72QZjtiH1L&#xA;/jnXX/GGT/iJxVBS6xp2j+XotQ1GX0bSCCMyOFeRvsjZUjDOxPYKCcVQ0Pmvy/rFnf8A6Nuxc/UZ&#xA;I4roqrgK8irKoqyjl8Djp8uuKpt+kbP/AH5+Df0xV36Rs/8Afn4N/TFXfpGz/wB+fg39MVd+kbP/&#xA;AH5+Df0xV36Rs/8Afn4N/TFXfpGz/wB+fg39MVd+kbP/AH5+Df0xV36Rs/8Afn4N/TFXfpGz/wB+&#xA;fg39MVd+kbP/AH5+Df0xV36Rs/8Afn4N/TFXfpGz/wB+fg39MVd+kbP/AH5+Df0xV36Rs/8Afn4N&#xA;/TFXfpGz/wB+fg39MVd+kbP/AH5+Df0xV36Rs/8Afn4N/TFUtkNsfMUGoBv3aWksDPQ/aeWN1FKV&#xA;/ZOWCforzY16rQmo3tq2qSRh9pW05hs3WO5kdj0/ljGWQ+m/633BjLn8k9/SNn/vz8G/pmO2IC3v&#xA;7RdYvR6nwvFbydG+0TIh7eCDLD9I+P6GI5lJ9Y1WFkuNaQ/u7IxR2exqwWWk8nT7LBqD/Vr3y7GN&#xA;xDv5/oa5Hqr6Nqtjo+hw2rCSZ4Z5YVjiUs5/eO9QDT7Kbn8K5HIOOd+SYnhCP1fU7G40WYQyh0u4&#xA;xFGwDUIuCIwQaf5eV4xU9+n6GcjYQdhfWo8xXCB6JD9Y7Gn74W0goKeIbJz+gfD9LEfV+PJPf0jZ&#xA;/wC/Pwb+mUNiwXmniQygqJWUK0nE8iqkkAmlaAscNqv/AEjZ/wC/Pwb+mBXfpGz/AN+fg39MVa1E&#xA;g6bdEdDC5H/AnFUL+itN1TRLe01G1iu7Z4UrFMgdd4+NQD0NGIriq39DaTptpdHT7OG0NwyvP6KK&#xA;nJloorxA6AYqmuKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVLb/TJptX069jYCO3aQ&#xA;XKH9pTGwjP8AsXP45bGdRIYGO4KZZUzSq+tNUfU+VmVihuIPSuLkmrR8GJXgn7TH1DQnZffplsZR&#xA;4d+9gQb2Rh06zawGntEDaBBEIjWnBQAB49shxm76suEVSBsNOuV1y/u51At1YCxFak+rHGZmP+yQ&#xA;AfT45ZKY4QB8f0MRHclD+nNHLFpBhkMS3azQzKjGIQKxuFBcDipR04AE9OPjkrB9Xl+xHkq6dCy+&#xA;adYcn4HitWQDxIdWr/yLXIzP7uPxSB6inWUs3Yq7FXYqh9S/4511/wAYZP8AiJxV2m/8c61/4wx/&#xA;8RGKu1H/AHjk+j/iQxVEYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXUFa98VdirsVdirsVQ+pf8c66/wCMMn/ETirHrry/rl/faFf2usPaadZQEXGmoJFE7SRcQzvH&#xA;IlePYFTTqPioQqh/LflLWdB0m/t9T1651kzPA0Ms7SF4xHEkbgGWSU0dlLUr79TirKfqX/F83/B/&#xA;2Yq76l/xfN/wf9mKu+pf8Xzf8H/ZirvqX/F83/B/2Yq76l/xfN/wf9mKu+pf8Xzf8H/ZirvqX/F8&#xA;3/B/2Yq76l/xfN/wf9mKu+pf8Xzf8H/ZirvqX/F83/B/2Yq76l/xfN/wf9mKu+pf8Xzf8H/Zirvq&#xA;X/F83/B/2Yq76l/xfN/wf9mKu+pf8Xzf8H/ZirvqX/F83/B/2Yq76l/xfN/wf9mKu+pf8Xzf8H/Z&#xA;irvqX/F83/B/2Yq76l/xfN/wf9mKu+pf8Xzf8H/ZirvqX/F83/B/2Yq76l/xfN/wf9mKu+pf8Xzf&#xA;8H/ZirvqX/F83/B/2Yq76l/xfN/wf9mKu+pf8Xzf8H/ZirvqX/F83/B/2Yq76l/xfN/wf9mKtaiK&#xA;abdDrSF9z/qnFW9N/wCOda/8YY/+IjFXaj/vHJ9H/EhiqIxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVD6l/xzrr/jDJ/xE4q7Tf8AjnWv/GGP/iIx&#xA;VLrXU7zVbfUFWwlthb3CQ2/1gNEZo2ghnMvF1UrRpWjpvup37BVMfXvP+Wb/AIdcVd695/yzf8Ou&#xA;Ku9e8/5Zv+HXFXevef8ALN/w64q717z/AJZv+HXFXevef8s3/DrirvXvP+Wb/h1xV3r3n/LN/wAO&#xA;uKu9e8/5Zv8Ah1xV3r3n/LN/w64q717z/lm/4dcVd695/wAs3/DrirvXvP8Alm/4dcVd695/yzf8&#xA;OuKu9e8/5Zv+HXFXevef8s3/AA64q717z/lm/wCHXFXevef8s3/DrirvXvP+Wb/h1xV3r3n/ACzf&#xA;8OuKu9e8/wCWb/h1xV3r3n/LN/w64q717z/lm/4dcVd695/yzf8ADrirvXvP+Wb/AIdcVd695/yz&#xA;f8OuKu9e8/5Zv+HXFXevef8ALN/w64q717z/AJZv+HXFWtRr+jbqoofReo/2JxVvTf8AjnWv/GGP&#xA;/iIxVEYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVG5nlhQNHbyXJJoViMYI9z6jxj8cMRfWkEpD5j83X&#xA;+jW1tcL5e1G+We5S3kjthDLIiujn1eMcj/CrKA1aDfrXYmUQOtqCl3lX8zU8yX9tb2+gapZ29wrv&#xA;9dvIRFCFC8oyGBYMJADSncfLIpZPJqN4rsq6XdOFJAdWtaMB3HKYHf3GRs9zYID+cPt/UwrVvzbu&#xA;tJnvUvfK2qNDau/Ge3iaRfTimMcjSsUSNG9MesoVmUoR8Q7SaynXlLz03mO7eEaHqOmRpD6vrX8P&#xA;ogvyAMaipr8LKwPcH54qynFXYq7FXYq7FXYq7FXYq7FXYq7FXYqh9S/4511/xhk/4icVW2yXkFvF&#xA;D6cbekipy9RhXiKVpwOKqnO9/wB9R/8AIxv+aMVdzvf99R/8jG/5oxV3O9/31H/yMb/mjFXc73/f&#xA;Uf8AyMb/AJoxV3O9/wB9R/8AIxv+aMVdzvf99R/8jG/5oxV3O9/31H/yMb/mjFXc73/fUf8AyMb/&#xA;AJoxV3O9/wB9R/8AIxv+aMVdzvf99R/8jG/5oxV3O9/31H/yMb/mjFXc73/fUf8AyMb/AJoxV3O9&#xA;/wB9R/8AIxv+aMVdzvf99R/8jG/5oxV3O9/31H/yMb/mjFXc73/fUf8AyMb/AJoxV3O9/wB9R/8A&#xA;Ixv+aMVdzvf99R/8jG/5oxV3O9/31H/yMb/mjFXc73/fUf8AyMb/AJoxV3O9/wB9R/8AIxv+aMVd&#xA;zvf99R/8jG/5oxV3O9/31H/yMb/mjFXc73/fUf8AyMb/AJoxV3O9/wB9R/8AIxv+aMVdzvf99R/8&#xA;jG/5oxV3O9/31H/yMb/mjFXc73/fUf8AyMb/AJoxV3O9/wB9R/8AIxv+aMVdzvf99R/8jG/5oxVT&#xA;uUvJ7eWH0419VGTl6jGnIUrTgMVf/9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:7FC71428CD05E01184CAE9BDA179522B</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:82C71428CD05E01184CAE9BDA179522B</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>675.000000</stDim:w>
            <stDim:h>455.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>True</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>ArialMT</stFnt:fontName>
                  <stFnt:fontFamily>Arial</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.06</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Arial.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -455 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 455 li
675 455 li
675 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 455.004 mo
675 455.004 li
675 0 li
0 0 li
0 455.004 li
clp
675 455.004 mo
0 455.004 li
0 0 li
675 0 li
675 455.004 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
grestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
39 414.446 mo
655 414.446 li
655 413.446 li
39 413.446 li
cp
39 364.5 mo
655 364.5 li
655 363.5 li
39 363.5 li
cp
39 314.5 mo
655 314.5 li
655 313.5 li
39 313.5 li
cp
39 264.5 mo
655 264.5 li
655 263.5 li
39 263.5 li
cp
39 164.5 mo
655 164.5 li
655 163.5 li
39 163.5 li
cp
39 114.5 mo
655 114.5 li
655 113.5 li
39 113.5 li
cp
39 64.5 mo
655 64.5 li
655 63.5 li
39 63.5 li
cp
39 14.5 mo
655 14.5 li
655 13.5 li
39 13.5 li
cp
false sop
0.431373 0.352941 0.356863 0.0117647 cmyk
f
grestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
39.8921 413.946 mo
39.8921 14 li
38.8921 14 li
38.8921 413.946 li
false sop
0.431373 0.352941 0.356863 0.0117647 cmyk
f
grestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
36 414.446 mo
39 414.446 li
39 413.446 li
36 413.446 li
cp
36 364.5 mo
39 364.5 li
39 363.5 li
36 363.5 li
cp
36 314.5 mo
39 314.5 li
39 313.5 li
36 313.5 li
cp
36 264.5 mo
39 264.5 li
39 263.5 li
36 263.5 li
cp
36 214.5 mo
39 214.5 li
39 213.5 li
36 213.5 li
cp
36 164.5 mo
39 164.5 li
39 163.5 li
36 163.5 li
cp
36 114.5 mo
39 114.5 li
39 113.5 li
36 113.5 li
cp
36 64.5 mo
39 64.5 li
39 63.5 li
36 63.5 li
cp
36 14.5 mo
39 14.5 li
39 13.5 li
36 13.5 li
cp
false sop
0.431373 0.352941 0.356863 0.0117647 cmyk
f
grestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
39.3921 214.473 mo
655.248 214.473 li
655.248 213.473 li
39.3921 213.473 li
false sop
0.431373 0.352941 0.356863 0.0117647 cmyk
f
grestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
38.5 214 mo
38.5 216.99 li
39.5 216.99 li
39.5 214 li
cp
77.5 214 mo
77.5 216.99 li
78.5 216.99 li
78.5 214 li
cp
115.5 214 mo
115.5 216.99 li
116.5 216.99 li
116.5 214 li
cp
154.5 214 mo
154.5 216.99 li
155.5 216.99 li
155.5 214 li
cp
192.5 214 mo
192.5 216.99 li
193.5 216.99 li
193.5 214 li
cp
231.5 214 mo
231.5 216.99 li
232.5 216.99 li
232.5 214 li
cp
269.5 214 mo
269.5 216.99 li
270.5 216.99 li
270.5 214 li
cp
308.5 214 mo
308.5 216.99 li
309.5 216.99 li
309.5 214 li
cp
346.5 214 mo
346.5 216.99 li
347.5 216.99 li
347.5 214 li
cp
385.5 214 mo
385.5 216.99 li
386.5 216.99 li
386.5 214 li
cp
423.5 214 mo
423.5 216.99 li
424.5 216.99 li
424.5 214 li
cp
462.5 214 mo
462.5 216.99 li
463.5 216.99 li
463.5 214 li
cp
500.5 214 mo
500.5 216.99 li
501.5 216.99 li
501.5 214 li
cp
539.5 214 mo
539.5 216.99 li
540.5 216.99 li
540.5 214 li
cp
577.5 214 mo
577.5 216.99 li
578.5 216.99 li
578.5 214 li
cp
616.5 214 mo
616.5 216.99 li
617.5 216.99 li
617.5 214 li
cp
654.5 214 mo
654.5 216.99 li
655.5 216.99 li
655.5 214 li
cp
false sop
0.431373 0.352941 0.356863 0.0117647 cmyk
f
grestore
gsave
38.997 414 mo
655.002 414 li
655.002 14.004 li
38.997 14.004 li
38.997 414 li
clp
43.0673 254.356 mo
48.0673 239.356 li
48.2637 238.766 47.9452 238.129 47.3558 237.933 cv
46.7663 237.736 46.1292 238.055 45.9327 238.644 cv
40.9327 253.644 li
40.7363 254.234 41.0548 254.871 41.6442 255.067 cv
42.2337 255.264 42.8708 254.945 43.0673 254.356 cv
cp
48.122 239.082 mo
52.122 184.082 li
52.1671 183.462 51.7013 182.923 51.0816 182.878 cv
50.4619 182.833 49.923 183.299 49.878 183.918 cv
45.878 238.918 li
45.8329 239.538 46.2987 240.077 46.9184 240.122 cv
47.5381 240.167 48.077 239.701 48.122 239.082 cv
cp
49.912 184.286 mo
54.912 203.286 li
55.0702 203.887 55.6854 204.246 56.2863 204.088 cv
56.8872 203.93 57.2461 203.315 57.088 202.714 cv
52.088 183.714 li
51.9298 183.113 51.3146 182.754 50.7137 182.912 cv
50.1128 183.07 49.7539 183.685 49.912 184.286 cv
cp
57.0242 203.466 mo
62.0242 192.466 li
62.2813 191.9 62.0312 191.233 61.4655 190.976 cv
60.8999 190.719 60.2329 190.969 59.9758 191.534 cv
54.9758 202.534 li
54.7187 203.1 54.9688 203.767 55.5345 204.024 cv
56.1001 204.281 56.7671 204.031 57.0242 203.466 cv
cp
59.9086 192.273 mo
64.9086 212.273 li
65.0593 212.876 65.6701 213.242 66.2729 213.091 cv
66.8756 212.941 67.2421 212.33 67.0914 211.727 cv
62.0914 191.727 li
61.9407 191.124 61.3299 190.758 60.7271 190.909 cv
60.1244 191.059 59.7579 191.67 59.9086 192.273 cv
cp
65.0166 212.546 mo
70.0166 221.546 li
70.3183 222.089 71.0032 222.285 71.5463 221.983 cv
72.0895 221.682 72.2852 220.997 71.9834 220.454 cv
66.9834 211.454 li
66.6817 210.911 65.9968 210.715 65.4537 211.017 cv
64.9105 211.318 64.7148 212.003 65.0166 212.546 cv
cp
72.122 221.082 mo
76.122 166.082 li
76.1671 165.462 75.7013 164.923 75.0816 164.878 cv
74.4619 164.833 73.923 165.299 73.878 165.918 cv
69.878 220.918 li
69.8329 221.538 70.2987 222.077 70.9184 222.122 cv
71.5381 222.167 72.077 221.701 72.122 221.082 cv
cp
75.7955 166.795 mo
80.7955 161.795 li
81.2348 161.356 81.2348 160.644 80.7955 160.204 cv
80.3561 159.765 79.6438 159.765 79.2045 160.204 cv
74.2045 165.204 li
73.7652 165.644 73.7652 166.356 74.2045 166.795 cv
74.6438 167.235 75.3561 167.235 75.7955 166.795 cv
cp
81.1031 161.221 mo
86.1031 136.221 li
86.225 135.611 85.8299 135.019 85.2206 134.897 cv
84.6114 134.775 84.0187 135.17 83.8968 135.779 cv
78.8968 160.779 li
78.775 161.389 79.1701 161.981 79.7794 162.103 cv
80.3886 162.225 80.9813 161.83 81.1031 161.221 cv
cp
83.8837 136.14 mo
88.8837 176.14 li
88.9607 176.756 89.523 177.193 90.1395 177.116 cv
90.7561 177.039 91.1934 176.477 91.1163 175.86 cv
86.1163 135.86 li
86.0392 135.244 85.477 134.807 84.8605 134.884 cv
84.2439 134.961 83.8066 135.523 83.8837 136.14 cv
cp
91.0673 176.356 mo
96.0673 161.356 li
96.2637 160.766 95.9452 160.129 95.3558 159.933 cv
94.7663 159.736 94.1292 160.055 93.9327 160.644 cv
88.9327 175.644 li
88.7363 176.234 89.0548 176.871 89.6442 177.067 cv
90.2337 177.264 90.8708 176.945 91.0673 176.356 cv
cp
96.1086 161.191 mo
101.109 132.191 li
101.214 131.579 100.803 130.997 100.191 130.891 cv
99.5789 130.786 98.9969 131.197 98.8913 131.809 cv
93.8913 160.809 li
93.7858 161.421 94.1966 162.003 94.8089 162.109 cv
95.4211 162.214 96.0031 161.803 96.1086 161.191 cv
cp
98.8775 132.075 mo
102.877 192.075 li
102.919 192.695 103.455 193.164 104.075 193.122 cv
104.695 193.081 105.164 192.545 105.123 191.925 cv
101.123 131.925 li
101.081 131.305 100.545 130.836 99.9252 130.877 cv
99.3052 130.919 98.8362 131.455 98.8775 132.075 cv
cp
104.864 192.72 mo
109.864 186.72 li
110.262 186.243 110.198 185.534 109.72 185.136 cv
109.243 184.738 108.534 184.802 108.136 185.28 cv
103.136 191.28 li
102.738 191.757 102.802 192.466 103.28 192.864 cv
103.757 193.262 104.466 193.198 104.864 192.72 cv
cp
110.117 186.133 mo
115.117 144.133 li
115.191 143.516 114.75 142.956 114.133 142.883 cv
113.516 142.809 112.956 143.25 112.883 143.867 cv
107.883 185.867 li
107.809 186.484 108.25 187.044 108.867 187.117 cv
109.484 187.191 110.044 186.75 110.117 186.133 cv
cp
115.059 144.378 mo
120.059 130.378 li
120.268 129.793 119.964 129.15 119.378 128.941 cv
118.793 128.732 118.15 129.036 117.941 129.622 cv
112.941 143.622 li
112.732 144.207 113.036 144.85 113.622 145.059 cv
114.207 145.268 114.85 144.964 115.059 144.378 cv
cp
117.881 130.114 mo
122.881 179.114 li
122.944 179.732 123.496 180.182 124.114 180.119 cv
124.732 180.056 125.182 179.504 125.119 178.886 cv
120.119 129.886 li
120.056 129.268 119.504 128.818 118.886 128.881 cv
118.268 128.944 117.818 129.496 117.881 130.114 cv
cp
125.117 179.135 mo
129.117 146.135 li
129.192 145.519 128.752 144.958 128.135 144.883 cv
127.519 144.808 126.958 145.248 126.883 145.865 cv
122.883 178.865 li
122.808 179.481 123.248 180.042 123.865 180.117 cv
124.481 180.192 125.042 179.752 125.117 179.135 cv
cp
126.903 146.249 mo
131.903 168.249 li
132.041 168.855 132.643 169.235 133.249 169.097 cv
133.855 168.959 134.235 168.357 134.097 167.751 cv
129.097 145.751 li
128.959 145.145 128.357 144.765 127.751 144.903 cv
127.145 145.041 126.765 145.643 126.903 146.249 cv
cp
134.111 168.179 mo
139.111 137.179 li
139.21 136.566 138.793 135.988 138.179 135.889 cv
137.566 135.79 136.988 136.207 136.889 136.821 cv
131.889 167.821 li
131.79 168.434 132.207 169.012 132.821 169.111 cv
133.434 169.21 134.012 168.793 134.111 168.179 cv
cp
139.101 137.229 mo
144.101 113.229 li
144.228 112.621 143.838 112.025 143.229 111.899 cv
142.621 111.772 142.025 112.162 141.899 112.771 cv
136.899 136.771 li
136.772 137.379 137.162 137.975 137.771 138.101 cv
138.379 138.228 138.975 137.838 139.101 137.229 cv
cp
142.136 113.72 mo
147.136 119.72 li
147.534 120.198 148.243 120.262 148.72 119.864 cv
149.198 119.466 149.262 118.757 148.864 118.28 cv
143.864 112.28 li
143.466 111.802 142.757 111.738 142.28 112.136 cv
141.802 112.534 141.738 113.243 142.136 113.72 cv
cp
149.115 119.149 mo
153.115 89.1487 li
153.197 88.5328 152.765 87.967 152.149 87.8849 cv
151.533 87.8027 150.967 88.2354 150.885 88.8513 cv
146.885 118.851 li
146.803 119.467 147.235 120.033 147.851 120.115 cv
148.467 120.197 149.033 119.765 149.115 119.149 cv
cp
151.204 89.7955 mo
156.204 94.7955 li
156.644 95.2348 157.356 95.2348 157.795 94.7955 cv
158.235 94.3561 158.235 93.6438 157.795 93.2045 cv
152.795 88.2045 li
152.356 87.7652 151.644 87.7652 151.204 88.2045 cv
150.765 88.6438 150.765 89.3561 151.204 89.7955 cv
cp
155.899 94.2294 mo
160.899 118.229 li
161.025 118.838 161.621 119.228 162.229 119.101 cv
162.838 118.975 163.228 118.379 163.101 117.771 cv
158.101 93.7705 li
157.975 93.1623 157.379 92.7719 156.771 92.8986 cv
156.162 93.0254 155.772 93.6212 155.899 94.2294 cv
cp
160.888 118.169 mo
165.888 151.169 li
165.981 151.783 166.554 152.205 167.169 152.112 cv
167.783 152.019 168.205 151.446 168.112 150.831 cv
163.112 117.831 li
163.019 117.217 162.446 116.795 161.831 116.888 cv
161.217 116.981 160.795 117.554 160.888 118.169 cv
cp
168.118 151.122 mo
173.118 105.122 li
173.186 104.504 172.739 103.949 172.122 103.882 cv
171.504 103.814 170.949 104.261 170.882 104.878 cv
165.882 150.878 li
165.814 151.496 166.261 152.051 166.878 152.118 cv
167.496 152.186 168.051 151.739 168.118 151.122 cv
cp
170.916 105.301 mo
175.916 123.301 li
176.082 123.9 176.702 124.25 177.301 124.084 cv
177.9 123.918 178.25 123.298 178.084 122.699 cv
173.084 104.699 li
172.918 104.1 172.298 103.75 171.699 103.916 cv
171.1 104.082 170.75 104.702 170.916 105.301 cv
cp
178.11 123.185 mo
182.11 99.1849 li
182.212 98.5721 181.798 97.9924 181.185 97.8903 cv
180.572 97.7882 179.992 98.2022 179.89 98.815 cv
175.89 122.815 li
175.788 123.428 176.202 124.008 176.815 124.11 cv
177.428 124.212 178.008 123.798 178.11 123.185 cv
cp
182.079 99.3174 mo
187.079 82.3174 li
187.255 81.7214 186.913 81.096 186.317 80.9207 cv
185.721 80.7454 185.096 81.0865 184.921 81.6826 cv
179.921 98.6826 li
179.745 99.2786 180.086 99.904 180.683 100.079 cv
181.279 100.255 181.904 99.9135 182.079 99.3174 cv
cp
184.976 82.4655 mo
189.976 93.4655 li
190.233 94.0312 190.9 94.2813 191.466 94.0242 cv
192.031 93.7671 192.281 93.1001 192.024 92.5345 cv
187.024 81.5345 li
186.767 80.9688 186.1 80.7187 185.534 80.9758 cv
184.969 81.2329 184.719 81.8999 184.976 82.4655 cv
cp
189.884 93.1395 mo
194.884 133.14 li
194.961 133.756 195.523 134.193 196.14 134.116 cv
196.756 134.039 197.193 133.477 197.116 132.86 cv
192.116 92.8605 li
192.039 92.2439 191.477 91.8066 190.86 91.8837 cv
190.244 91.9607 189.807 92.523 189.884 93.1395 cv
cp
194.921 133.317 mo
199.921 150.317 li
200.096 150.913 200.721 151.255 201.317 151.079 cv
201.913 150.904 202.255 150.279 202.079 149.683 cv
197.079 132.683 li
196.904 132.086 196.279 131.745 195.683 131.921 cv
195.086 132.096 194.745 132.721 194.921 133.317 cv
cp
202.122 150.083 mo
206.122 96.0831 li
206.168 95.4635 205.703 94.924 205.083 94.8781 cv
204.463 94.8322 203.924 95.2973 203.878 95.9169 cv
199.878 149.917 li
199.832 150.537 200.297 151.076 200.917 151.122 cv
201.537 151.168 202.076 150.703 202.122 150.083 cv
cp
203.888 96.1685 mo
208.888 129.169 li
208.981 129.783 209.554 130.205 210.169 130.112 cv
210.783 130.019 211.205 129.446 211.112 128.831 cv
206.112 95.8315 li
206.019 95.2172 205.446 94.7946 204.831 94.8877 cv
204.217 94.9808 203.795 95.5542 203.888 96.1685 cv
cp
211.101 129.229 mo
216.101 105.229 li
216.228 104.621 215.838 104.025 215.229 103.899 cv
214.621 103.772 214.025 104.162 213.899 104.771 cv
208.899 128.771 li
208.772 129.379 209.162 129.975 209.771 130.101 cv
210.379 130.228 210.975 129.838 211.101 129.229 cv
cp
215.983 105.546 mo
220.983 96.5463 li
221.285 96.0032 221.089 95.3183 220.546 95.0166 cv
220.003 94.7148 219.318 94.9105 219.017 95.4537 cv
214.017 104.454 li
213.715 104.997 213.911 105.682 214.454 105.983 cv
214.997 106.285 215.682 106.089 215.983 105.546 cv
cp
221.079 96.3174 mo
226.079 79.3174 li
226.255 78.7214 225.913 78.096 225.317 77.9207 cv
224.721 77.7454 224.096 78.0865 223.921 78.6826 cv
218.921 95.6826 li
218.745 96.2786 219.086 96.904 219.683 97.0793 cv
220.279 97.2546 220.904 96.9135 221.079 96.3174 cv
cp
223.878 79.0863 mo
227.878 131.086 li
227.926 131.706 228.467 132.169 229.086 132.122 cv
229.706 132.074 230.169 131.533 230.122 130.914 cv
226.122 78.9137 li
226.074 78.2942 225.533 77.8307 224.914 77.8783 cv
224.294 77.926 223.831 78.4668 223.878 79.0863 cv
cp
227.976 131.466 mo
232.976 142.466 li
233.233 143.031 233.9 143.281 234.466 143.024 cv
235.031 142.767 235.281 142.1 235.024 141.534 cv
230.024 130.534 li
229.767 129.969 229.1 129.719 228.534 129.976 cv
227.969 130.233 227.719 130.9 227.976 131.466 cv
cp
235.121 142.098 mo
240.121 85.0983 li
240.175 84.4794 239.717 83.9336 239.098 83.8793 cv
238.479 83.825 237.934 84.2827 237.879 84.9017 cv
232.879 141.902 li
232.825 142.521 233.283 143.066 233.902 143.121 cv
234.521 143.175 235.066 142.717 235.121 142.098 cv
cp
237.901 85.239 mo
242.901 108.239 li
243.033 108.846 243.632 109.231 244.239 109.099 cv
244.846 108.967 245.231 108.368 245.099 107.761 cv
240.099 84.761 li
239.967 84.1539 239.368 83.7687 238.761 83.9007 cv
238.154 84.0327 237.769 84.6318 237.901 85.239 cv
cp
244 109.125 mo
249 109.125 li
249.621 109.125 250.125 108.621 250.125 108 cv
250.125 107.379 249.621 106.875 249 106.875 cv
244 106.875 li
243.379 106.875 242.875 107.379 242.875 108 cv
242.875 108.621 243.379 109.125 244 109.125 cv
cp
247.943 108.384 mo
251.943 119.384 li
252.155 119.968 252.801 120.27 253.384 120.057 cv
253.968 119.845 254.27 119.199 254.057 118.616 cv
250.057 107.616 li
249.845 107.032 249.199 106.73 248.616 106.943 cv
248.032 107.155 247.73 107.801 247.943 108.384 cv
cp
251.881 119.114 mo
256.881 168.114 li
256.944 168.732 257.496 169.182 258.114 169.119 cv
258.732 169.056 259.182 168.504 259.119 167.886 cv
254.119 118.886 li
254.056 118.268 253.504 117.818 252.886 117.881 cv
252.268 117.944 251.818 118.496 251.881 119.114 cv
cp
259.117 168.133 mo
264.117 126.133 li
264.191 125.516 263.75 124.956 263.133 124.883 cv
262.516 124.809 261.956 125.25 261.883 125.867 cv
256.883 167.867 li
256.809 168.484 257.25 169.044 257.867 169.117 cv
258.484 169.191 259.044 168.75 259.117 168.133 cv
cp
264.079 126.317 mo
269.079 109.317 li
269.255 108.721 268.913 108.096 268.317 107.921 cv
267.721 107.745 267.096 108.086 266.921 108.683 cv
261.921 125.683 li
261.745 126.279 262.086 126.904 262.683 127.079 cv
263.279 127.255 263.904 126.914 264.079 126.317 cv
cp
266.88 109.108 mo
271.88 161.108 li
271.94 161.726 272.489 162.179 273.108 162.12 cv
273.726 162.06 274.179 161.511 274.12 160.892 cv
269.12 108.892 li
269.06 108.274 268.511 107.821 267.892 107.88 cv
267.274 107.94 266.821 108.489 266.88 109.108 cv
cp
273.983 161.546 mo
278.983 152.546 li
279.285 152.003 279.089 151.318 278.546 151.017 cv
278.003 150.715 277.318 150.911 277.017 151.454 cv
272.017 160.454 li
271.715 160.997 271.91 161.682 272.454 161.983 cv
272.997 162.285 273.682 162.089 273.983 161.546 cv
cp
279.108 152.193 mo
283.108 129.193 li
283.215 128.581 282.805 127.998 282.193 127.892 cv
281.581 127.785 280.998 128.195 280.892 128.807 cv
276.892 151.807 li
276.785 152.419 277.195 153.002 277.807 153.108 cv
278.419 153.215 279.002 152.805 279.108 152.193 cv
cp
280.894 129.205 mo
285.894 156.205 li
286.007 156.816 286.594 157.219 287.205 157.106 cv
287.816 156.993 288.219 156.406 288.106 155.795 cv
283.106 128.795 li
282.993 128.184 282.406 127.781 281.795 127.894 cv
281.184 128.007 280.781 128.594 280.894 129.205 cv
cp
285.901 156.239 mo
290.901 179.239 li
291.033 179.846 291.632 180.231 292.239 180.099 cv
292.846 179.967 293.231 179.368 293.099 178.761 cv
288.099 155.761 li
287.967 155.154 287.368 154.769 286.761 154.901 cv
286.154 155.033 285.769 155.632 285.901 156.239 cv
cp
291.582 180.045 mo
296.582 182.045 li
297.159 182.275 297.814 181.995 298.045 181.418 cv
298.275 180.841 297.995 180.186 297.418 179.955 cv
292.418 177.955 li
291.841 177.725 291.186 178.005 290.955 178.582 cv
290.725 179.159 291.005 179.814 291.582 180.045 cv
cp
297.579 181.965 mo
302.579 178.965 li
303.112 178.645 303.284 177.954 302.965 177.421 cv
302.645 176.888 301.954 176.716 301.421 177.035 cv
296.421 180.035 li
295.888 180.355 295.716 181.046 296.035 181.579 cv
296.355 182.112 297.046 182.284 297.579 181.965 cv
cp
300.897 178.221 mo
304.897 198.221 li
305.019 198.83 305.611 199.225 306.221 199.103 cv
306.83 198.981 307.225 198.389 307.103 197.779 cv
303.103 177.779 li
302.981 177.17 302.389 176.775 301.779 176.897 cv
301.17 177.019 300.775 177.611 300.897 178.221 cv
cp
307.094 198.261 mo
312.094 177.261 li
312.238 176.656 311.865 176.049 311.261 175.906 cv
310.656 175.762 310.049 176.135 309.906 176.739 cv
304.906 197.739 li
304.762 198.344 305.135 198.95 305.739 199.094 cv
306.344 199.238 306.95 198.865 307.094 198.261 cv
cp
312.109 177.191 mo
317.109 148.191 li
317.214 147.579 316.803 146.997 316.191 146.891 cv
315.579 146.786 314.997 147.197 314.891 147.809 cv
309.891 176.809 li
309.786 177.421 310.197 178.003 310.809 178.109 cv
311.421 178.214 312.003 177.803 312.109 177.191 cv
cp
315.297 148.878 mo
320.297 152.878 li
320.782 153.267 321.49 153.188 321.878 152.703 cv
322.267 152.218 322.188 151.51 321.703 151.122 cv
316.703 147.122 li
316.218 146.733 315.51 146.812 315.122 147.297 cv
314.733 147.782 314.812 148.49 315.297 148.878 cv
cp
319.878 152.077 mo
324.878 225.077 li
324.92 225.697 325.457 226.165 326.077 226.122 cv
326.697 226.08 327.165 225.543 327.122 224.923 cv
322.122 151.923 li
322.08 151.303 321.543 150.835 320.923 150.878 cv
320.303 150.92 319.835 151.457 319.878 152.077 cv
cp
327.123 225.071 mo
331.123 162.071 li
331.162 161.451 330.691 160.917 330.071 160.877 cv
329.451 160.838 328.917 161.309 328.877 161.929 cv
324.877 224.929 li
324.838 225.549 325.309 226.083 325.929 226.123 cv
326.549 226.162 327.083 225.691 327.123 225.071 cv
cp
328.885 162.151 mo
333.885 199.151 li
333.968 199.766 334.535 200.198 335.151 200.115 cv
335.766 200.032 336.198 199.465 336.115 198.849 cv
331.115 161.849 li
331.032 161.234 330.465 160.802 329.849 160.885 cv
329.234 160.968 328.802 161.535 328.885 162.151 cv
cp
334.297 199.878 mo
339.297 203.878 li
339.782 204.267 340.49 204.188 340.878 203.703 cv
341.267 203.218 341.188 202.51 340.703 202.122 cv
335.703 198.122 li
335.218 197.733 334.51 197.812 334.122 198.297 cv
333.733 198.782 333.812 199.49 334.297 199.878 cv
cp
338.906 203.261 mo
343.906 224.261 li
344.049 224.865 344.656 225.238 345.261 225.094 cv
345.865 224.95 346.238 224.344 346.094 223.739 cv
341.094 202.739 li
340.95 202.135 340.344 201.762 339.739 201.906 cv
339.135 202.049 338.762 202.656 338.906 203.261 cv
cp
346.119 224.114 mo
351.119 175.114 li
351.182 174.496 350.732 173.944 350.114 173.881 cv
349.496 173.818 348.944 174.268 348.881 174.886 cv
343.881 223.886 li
343.818 224.504 344.268 225.056 344.886 225.119 cv
345.504 225.182 346.056 224.732 346.119 224.114 cv
cp
348.882 175.127 mo
353.882 219.127 li
353.952 219.744 354.51 220.188 355.127 220.118 cv
355.744 220.048 356.188 219.49 356.118 218.873 cv
351.118 174.873 li
351.048 174.256 350.49 173.812 349.873 173.882 cv
349.256 173.952 348.812 174.51 348.882 175.127 cv
cp
353.892 219.193 mo
357.892 242.193 li
357.998 242.805 358.581 243.215 359.193 243.108 cv
359.805 243.002 360.215 242.419 360.108 241.807 cv
356.108 218.807 li
356.002 218.195 355.419 217.785 354.807 217.892 cv
354.195 217.998 353.785 218.581 353.892 219.193 cv
cp
357.912 242.286 mo
362.912 261.286 li
363.07 261.887 363.685 262.246 364.286 262.088 cv
364.887 261.93 365.246 261.315 365.088 260.714 cv
360.088 241.714 li
359.93 241.113 359.315 240.754 358.714 240.912 cv
358.113 241.07 357.754 241.685 357.912 242.286 cv
cp
365.121 261.089 mo
370.121 198.089 li
370.171 197.47 369.708 196.928 369.089 196.879 cv
368.47 196.829 367.928 197.292 367.879 197.911 cv
362.879 260.911 li
362.829 261.53 363.292 262.072 363.911 262.121 cv
364.53 262.171 365.072 261.708 365.121 261.089 cv
cp
367.878 198.076 mo
372.878 272.076 li
372.919 272.696 373.456 273.164 374.076 273.122 cv
374.696 273.081 375.164 272.544 375.122 271.924 cv
370.122 197.924 li
370.081 197.304 369.544 196.836 368.924 196.878 cv
368.304 196.919 367.836 197.456 367.878 198.076 cv
cp
375.109 272.191 mo
380.109 243.191 li
380.214 242.579 379.803 241.997 379.191 241.891 cv
378.579 241.786 377.997 242.197 377.891 242.809 cv
372.891 271.809 li
372.786 272.421 373.197 273.003 373.809 273.109 cv
374.421 273.214 375.003 272.803 375.109 272.191 cv
cp
377.918 243.309 mo
381.918 257.309 li
382.089 257.906 382.712 258.252 383.309 258.082 cv
383.906 257.911 384.252 257.288 384.082 256.691 cv
380.082 242.691 li
379.911 242.094 379.288 241.748 378.691 241.918 cv
378.094 242.089 377.748 242.712 377.918 243.309 cv
cp
381.95 257.404 mo
386.95 270.404 li
387.173 270.984 387.824 271.273 388.404 271.05 cv
388.984 270.827 389.273 270.176 389.05 269.596 cv
384.05 256.596 li
383.827 256.016 383.176 255.727 382.596 255.95 cv
382.016 256.173 381.727 256.824 381.95 257.404 cv
cp
389.118 270.122 mo
394.118 224.122 li
394.186 223.504 393.739 222.949 393.122 222.882 cv
392.504 222.814 391.949 223.261 391.882 223.878 cv
386.882 269.878 li
386.814 270.496 387.261 271.051 387.878 271.118 cv
388.496 271.186 389.051 270.739 389.118 270.122 cv
cp
391.886 224.159 mo
396.886 259.159 li
396.974 259.774 397.544 260.202 398.159 260.114 cv
398.774 260.026 399.202 259.456 399.114 258.841 cv
394.114 223.841 li
394.026 223.226 393.456 222.798 392.841 222.886 cv
392.226 222.974 391.798 223.544 391.886 224.159 cv
cp
397.017 259.546 mo
402.017 268.546 li
402.318 269.089 403.003 269.285 403.546 268.983 cv
404.089 268.682 404.285 267.997 403.983 267.454 cv
398.983 258.454 li
398.682 257.91 397.997 257.715 397.454 258.017 cv
396.91 258.318 396.715 259.003 397.017 259.546 cv
cp
404.117 268.131 mo
408.117 234.131 li
408.19 233.514 407.749 232.955 407.131 232.883 cv
406.514 232.81 405.955 233.251 405.883 233.869 cv
401.883 267.869 li
401.81 268.486 402.251 269.045 402.869 269.117 cv
403.486 269.19 404.045 268.749 404.117 268.131 cv
cp
405.877 234.074 mo
410.877 310.074 li
410.918 310.694 411.454 311.163 412.074 311.123 cv
412.694 311.082 413.163 310.546 413.123 309.926 cv
408.123 233.926 li
408.082 233.306 407.546 232.837 406.926 232.877 cv
406.306 232.918 405.837 233.454 405.877 234.074 cv
cp
413.12 310.104 mo
418.12 256.104 li
418.177 255.485 417.722 254.937 417.104 254.88 cv
416.485 254.822 415.937 255.278 415.88 255.896 cv
410.88 309.896 li
410.822 310.515 411.278 311.063 411.896 311.12 cv
412.515 311.177 413.063 310.722 413.12 310.104 cv
cp
416.421 256.965 mo
421.421 259.965 li
421.954 260.284 422.645 260.112 422.965 259.579 cv
423.284 259.046 423.112 258.355 422.579 258.035 cv
417.579 255.035 li
417.046 254.716 416.355 254.888 416.035 255.421 cv
415.716 255.954 415.888 256.645 416.421 256.965 cv
cp
422.221 260.103 mo
427.221 259.103 li
427.83 258.981 428.225 258.389 428.103 257.779 cv
427.981 257.17 427.389 256.775 426.779 256.897 cv
421.779 257.897 li
421.17 258.019 420.775 258.611 420.897 259.221 cv
421.019 259.83 421.611 260.225 422.221 260.103 cv
cp
425.879 258.093 mo
430.879 318.093 li
430.93 318.713 431.474 319.173 432.093 319.121 cv
432.713 319.069 433.173 318.526 433.121 317.907 cv
428.121 257.907 li
428.069 257.287 427.526 256.827 426.907 256.879 cv
426.287 256.93 425.827 257.474 425.879 258.093 cv
cp
430.933 318.356 mo
434.933 330.356 li
435.129 330.945 435.766 331.264 436.356 331.067 cv
436.945 330.871 437.264 330.234 437.067 329.644 cv
433.067 317.644 li
432.871 317.055 432.234 316.736 431.644 316.933 cv
431.055 317.129 430.736 317.766 430.933 318.356 cv
cp
437.12 330.11 mo
442.12 279.11 li
442.18 278.491 441.728 277.941 441.11 277.88 cv
440.491 277.82 439.941 278.272 439.88 278.89 cv
434.88 329.89 li
434.82 330.509 435.272 331.059 435.89 331.12 cv
436.509 331.18 437.059 330.728 437.12 330.11 cv
cp
442.024 279.466 mo
447.024 268.466 li
447.281 267.9 447.031 267.233 446.466 266.976 cv
445.9 266.719 445.233 266.969 444.976 267.534 cv
439.976 278.534 li
439.719 279.1 439.969 279.767 440.534 280.024 cv
441.1 280.281 441.767 280.031 442.024 279.466 cv
cp
444.906 268.261 mo
449.906 289.261 li
450.049 289.865 450.656 290.238 451.261 290.094 cv
451.865 289.95 452.238 289.344 452.094 288.739 cv
447.094 267.739 li
446.95 267.135 446.344 266.762 445.739 266.906 cv
445.135 267.049 444.762 267.656 444.906 268.261 cv
cp
451.864 289.72 mo
456.864 283.72 li
457.262 283.243 457.198 282.534 456.72 282.136 cv
456.243 281.738 455.534 281.802 455.136 282.28 cv
450.136 288.28 li
449.738 288.757 449.802 289.466 450.28 289.864 cv
450.757 290.262 451.466 290.198 451.864 289.72 cv
cp
455.325 283.9 mo
459.325 286.9 li
459.822 287.273 460.527 287.172 460.9 286.675 cv
461.273 286.178 461.172 285.473 460.675 285.1 cv
456.675 282.1 li
456.178 281.727 455.473 281.828 455.1 282.325 cv
454.727 282.822 454.828 283.527 455.325 283.9 cv
cp
461.091 286.273 mo
466.091 266.273 li
466.242 265.67 465.876 265.059 465.273 264.909 cv
464.67 264.758 464.059 265.124 463.909 265.727 cv
458.909 285.727 li
458.758 286.33 459.124 286.941 459.727 287.091 cv
460.33 287.242 460.941 286.876 461.091 286.273 cv
cp
463.976 266.466 mo
468.976 277.466 li
469.233 278.031 469.9 278.281 470.466 278.024 cv
471.031 277.767 471.281 277.1 471.024 276.534 cv
466.024 265.534 li
465.767 264.969 465.1 264.719 464.534 264.976 cv
463.969 265.233 463.719 265.9 463.976 266.466 cv
cp
468.88 277.104 mo
473.88 331.104 li
473.937 331.722 474.485 332.177 475.104 332.12 cv
475.722 332.063 476.177 331.515 476.12 330.896 cv
471.12 276.896 li
471.063 276.278 470.515 275.822 469.896 275.88 cv
469.278 275.937 468.822 276.485 468.88 277.104 cv
cp
475.795 331.795 mo
480.795 326.795 li
481.235 326.356 481.235 325.644 480.795 325.204 cv
480.356 324.765 479.644 324.765 479.204 325.204 cv
474.204 330.204 li
473.765 330.644 473.765 331.356 474.204 331.795 cv
474.644 332.235 475.356 332.235 475.795 331.795 cv
cp
480.503 327.006 mo
484.503 325.006 li
485.059 324.728 485.284 324.053 485.006 323.497 cv
484.728 322.941 484.053 322.716 483.497 322.994 cv
479.497 324.994 li
478.941 325.272 478.716 325.947 478.994 326.503 cv
479.272 327.059 479.947 327.284 480.503 327.006 cv
cp
485.038 324.433 mo
490.038 312.433 li
490.277 311.859 490.006 311.201 489.433 310.962 cv
488.859 310.723 488.201 310.994 487.962 311.567 cv
482.962 323.567 li
482.723 324.141 482.994 324.799 483.567 325.038 cv
484.141 325.277 484.799 325.006 485.038 324.433 cv
cp
489.864 312.72 mo
494.864 306.72 li
495.262 306.243 495.198 305.534 494.72 305.136 cv
494.243 304.738 493.534 304.802 493.136 305.28 cv
488.136 311.28 li
487.738 311.757 487.802 312.466 488.28 312.864 cv
488.757 313.262 489.466 313.198 489.864 312.72 cv
cp
495.091 306.273 mo
500.091 286.273 li
500.242 285.67 499.876 285.059 499.273 284.909 cv
498.67 284.758 498.059 285.124 497.909 285.727 cv
492.909 305.727 li
492.758 306.33 493.124 306.941 493.727 307.091 cv
494.33 307.242 494.941 306.876 495.091 306.273 cv
cp
497.886 286.159 mo
502.886 321.159 li
502.974 321.774 503.544 322.202 504.159 322.114 cv
504.774 322.026 505.202 321.456 505.114 320.841 cv
500.114 285.841 li
500.026 285.226 499.456 284.798 498.841 284.886 cv
498.226 284.974 497.798 285.544 497.886 286.159 cv
cp
505.113 321.164 mo
510.113 287.164 li
510.203 286.549 509.778 285.977 509.164 285.887 cv
508.549 285.797 507.977 286.222 507.887 286.836 cv
502.887 320.836 li
502.797 321.451 503.222 322.023 503.836 322.113 cv
504.451 322.203 505.023 321.778 505.113 321.164 cv
cp
507.879 287.1 mo
511.879 332.1 li
511.934 332.718 512.481 333.176 513.1 333.121 cv
513.718 333.066 514.176 332.519 514.121 331.9 cv
510.121 286.9 li
510.066 286.281 509.519 285.824 508.9 285.879 cv
508.281 285.934 507.824 286.481 507.879 287.1 cv
cp
514.038 332.433 mo
519.038 320.433 li
519.277 319.859 519.006 319.201 518.433 318.962 cv
517.859 318.723 517.201 318.994 516.961 319.567 cv
511.962 331.567 li
511.723 332.141 511.994 332.799 512.567 333.038 cv
513.141 333.277 513.799 333.006 514.038 332.433 cv
cp
519.024 320.466 mo
524.024 309.466 li
524.281 308.9 524.031 308.233 523.466 307.976 cv
522.9 307.719 522.233 307.969 521.976 308.534 cv
516.976 319.534 li
516.719 320.1 516.969 320.767 517.534 321.024 cv
518.1 321.281 518.767 321.031 519.024 320.466 cv
cp
522.204 309.795 mo
527.204 314.795 li
527.644 315.235 528.356 315.235 528.795 314.795 cv
529.235 314.356 529.235 313.644 528.795 313.204 cv
523.795 308.204 li
523.356 307.765 522.644 307.765 522.204 308.204 cv
521.765 308.644 521.765 309.356 522.204 309.795 cv
cp
526.95 314.404 mo
531.95 327.404 li
532.173 327.984 532.824 328.273 533.404 328.05 cv
533.984 327.827 534.273 327.176 534.05 326.596 cv
529.05 313.596 li
528.827 313.016 528.176 312.727 527.596 312.95 cv
527.016 313.173 526.727 313.824 526.95 314.404 cv
cp
532.023 327.558 mo
536.023 334.558 li
536.331 335.098 537.019 335.285 537.558 334.977 cv
538.098 334.668 538.285 333.981 537.977 333.442 cv
533.977 326.442 li
533.668 325.902 532.981 325.715 532.442 326.023 cv
531.902 326.331 531.715 327.019 532.023 327.558 cv
cp
537 335.125 mo
542 335.125 li
542.621 335.125 543.125 334.621 543.125 334 cv
543.125 333.379 542.621 332.875 542 332.875 cv
537 332.875 li
536.379 332.875 535.875 333.379 535.875 334 cv
535.875 334.621 536.379 335.125 537 335.125 cv
cp
543.114 334.159 mo
548.114 299.159 li
548.202 298.544 547.774 297.974 547.159 297.886 cv
546.544 297.798 545.974 298.226 545.886 298.841 cv
540.886 333.841 li
540.798 334.456 541.226 335.026 541.841 335.114 cv
542.456 335.202 543.026 334.774 543.114 334.159 cv
cp
548.094 299.261 mo
553.094 278.261 li
553.238 277.656 552.865 277.049 552.261 276.906 cv
551.656 276.762 551.049 277.135 550.906 277.739 cv
545.906 298.739 li
545.762 299.344 546.135 299.95 546.739 300.094 cv
547.344 300.238 547.95 299.865 548.094 299.261 cv
cp
550.879 278.095 mo
555.879 337.095 li
555.931 337.714 556.476 338.173 557.095 338.121 cv
557.714 338.069 558.173 337.524 558.121 336.905 cv
553.121 277.905 li
553.068 277.286 552.524 276.827 551.905 276.879 cv
551.286 276.931 550.827 277.476 550.879 278.095 cv
cp
558.12 337.104 mo
562.12 294.104 li
562.178 293.486 561.723 292.937 561.104 292.88 cv
560.486 292.822 559.937 293.277 559.88 293.896 cv
555.88 336.896 li
555.822 337.514 556.277 338.063 556.896 338.12 cv
557.514 338.178 558.063 337.723 558.12 337.104 cv
cp
561 295.125 mo
566 295.125 li
566.621 295.125 567.125 294.621 567.125 294 cv
567.125 293.379 566.621 292.875 566 292.875 cv
561 292.875 li
560.379 292.875 559.875 293.379 559.875 294 cv
559.875 294.621 560.379 295.125 561 295.125 cv
cp
567.116 294.143 mo
572.116 255.143 li
572.195 254.527 571.759 253.963 571.143 253.884 cv
570.527 253.805 569.963 254.241 569.884 254.857 cv
564.884 293.857 li
564.805 294.473 565.241 295.037 565.857 295.116 cv
566.473 295.195 567.037 294.759 567.116 294.143 cv
cp
569.95 255.404 mo
574.95 268.404 li
575.173 268.984 575.824 269.273 576.404 269.05 cv
576.984 268.827 577.273 268.176 577.05 267.596 cv
572.05 254.596 li
571.827 254.016 571.176 253.727 570.596 253.95 cv
570.016 254.173 569.727 254.824 569.95 255.404 cv
cp
574.961 268.433 mo
579.961 280.433 li
580.201 281.006 580.859 281.277 581.433 281.038 cv
582.006 280.799 582.277 280.141 582.038 279.567 cv
577.038 267.567 li
576.799 266.994 576.141 266.723 575.567 266.962 cv
574.994 267.201 574.723 267.859 574.961 268.433 cv
cp
582.115 280.149 mo
586.115 250.149 li
586.197 249.533 585.765 248.967 585.149 248.885 cv
584.533 248.803 583.967 249.235 583.885 249.851 cv
579.885 279.851 li
579.803 280.467 580.235 281.033 580.851 281.115 cv
581.467 281.197 582.033 280.765 582.115 280.149 cv
cp
583.921 250.317 mo
588.921 267.317 li
589.096 267.913 589.721 268.255 590.317 268.079 cv
590.913 267.904 591.255 267.279 591.079 266.683 cv
586.079 249.683 li
585.904 249.086 585.279 248.745 584.683 248.921 cv
584.086 249.096 583.745 249.721 583.921 250.317 cv
cp
591.094 267.261 mo
596.094 246.261 li
596.238 245.656 595.865 245.049 595.261 244.906 cv
594.656 244.762 594.049 245.135 593.906 245.739 cv
588.906 266.739 li
588.762 267.344 589.135 267.95 589.739 268.094 cv
590.344 268.238 590.95 267.865 591.094 267.261 cv
cp
593.88 246.11 mo
598.88 297.11 li
598.941 297.728 599.491 298.18 600.11 298.12 cv
600.728 298.059 601.18 297.509 601.12 296.89 cv
596.12 245.89 li
596.059 245.272 595.509 244.82 594.89 244.88 cv
594.272 244.941 593.82 245.491 593.88 246.11 cv
cp
600.983 297.546 mo
605.983 288.546 li
606.285 288.003 606.089 287.318 605.546 287.017 cv
605.003 286.715 604.318 286.91 604.017 287.454 cv
599.017 296.454 li
598.715 296.997 598.91 297.682 599.454 297.983 cv
599.997 298.285 600.682 298.089 600.983 297.546 cv
cp
606.118 288.127 mo
611.118 244.127 li
611.188 243.51 610.744 242.952 610.127 242.882 cv
609.51 242.812 608.952 243.256 608.882 243.873 cv
603.882 287.873 li
603.812 288.49 604.256 289.048 604.873 289.118 cv
605.49 289.188 606.048 288.744 606.118 288.127 cv
cp
608.88 244.107 mo
612.88 286.107 li
612.939 286.725 613.488 287.179 614.107 287.12 cv
614.725 287.061 615.179 286.512 615.12 285.893 cv
611.12 243.893 li
611.061 243.275 610.512 242.821 609.893 242.88 cv
609.275 242.939 608.821 243.488 608.88 244.107 cv
cp
614.221 287.103 mo
619.221 286.103 li
619.83 285.981 620.225 285.389 620.103 284.779 cv
619.981 284.17 619.389 283.775 618.779 283.897 cv
613.779 284.897 li
613.17 285.019 612.775 285.611 612.897 286.221 cv
613.019 286.83 613.611 287.225 614.221 287.103 cv
cp
620.088 285.286 mo
625.088 266.286 li
625.246 265.685 624.887 265.07 624.286 264.912 cv
623.685 264.754 623.07 265.113 622.912 265.714 cv
617.912 284.714 li
617.754 285.315 618.113 285.93 618.714 286.088 cv
619.315 286.246 619.93 285.887 620.088 285.286 cv
cp
622.921 266.317 mo
627.921 283.317 li
628.096 283.913 628.721 284.255 629.317 284.079 cv
629.913 283.904 630.255 283.279 630.079 282.683 cv
625.079 265.683 li
624.904 265.086 624.279 264.745 623.683 264.921 cv
623.086 265.096 622.745 265.721 622.921 266.317 cv
cp
630.115 283.147 mo
635.115 245.147 li
635.196 244.531 634.763 243.966 634.147 243.885 cv
633.531 243.804 632.966 244.237 632.885 244.853 cv
627.885 282.853 li
627.804 283.469 628.237 284.034 628.853 284.115 cv
629.469 284.196 630.034 283.763 630.115 283.147 cv
cp
632.888 245.171 mo
636.888 271.171 li
636.983 271.785 637.557 272.206 638.171 272.112 cv
638.785 272.017 639.206 271.443 639.112 270.829 cv
635.112 244.829 li
635.017 244.215 634.443 243.794 633.829 243.888 cv
633.215 243.983 632.794 244.557 632.888 245.171 cv
cp
639.121 271.095 mo
644.121 212.095 li
644.173 211.476 643.714 210.931 643.095 210.879 cv
642.476 210.827 641.931 211.286 641.879 211.905 cv
636.879 270.905 li
636.827 271.524 637.286 272.069 637.905 272.121 cv
638.524 272.173 639.068 271.714 639.121 271.095 cv
cp
644.099 212.239 mo
649.099 189.239 li
649.231 188.632 648.846 188.033 648.239 187.901 cv
647.632 187.769 647.033 188.154 646.901 188.761 cv
641.901 211.761 li
641.769 212.368 642.154 212.967 642.761 213.099 cv
643.368 213.231 643.967 212.846 644.099 212.239 cv
cp
646.88 189.106 mo
651.722 240.106 li
651.781 240.725 652.33 241.179 652.948 241.12 cv
653.567 241.061 654.02 240.512 653.962 239.894 cv
649.12 188.894 li
649.061 188.275 648.512 187.821 647.894 187.88 cv
647.275 187.939 646.821 188.488 646.88 189.106 cv
cp
false sop
0.65098 0.337255 0.0352941 0 cmyk
f
grestore
gsave
38.997 414 mo
655.002 414 li
655.002 14.004 li
38.997 14.004 li
38.997 414 li
clp
42 215.125 mo
47 215.125 li
47.6213 215.125 48.125 214.621 48.125 214 cv
48.125 213.379 47.6213 212.875 47 212.875 cv
42 212.875 li
41.3787 212.875 40.875 213.379 40.875 214 cv
40.875 214.621 41.3787 215.125 42 215.125 cv
cp
46.0639 214.624 mo
50.0639 220.624 li
50.4086 221.141 51.1071 221.281 51.624 220.936 cv
52.141 220.591 52.2807 219.893 51.9361 219.376 cv
47.9361 213.376 li
47.5914 212.859 46.8929 212.719 46.376 213.064 cv
45.859 213.409 45.7193 214.107 46.0639 214.624 cv
cp
50.0845 220.654 mo
55.0845 227.654 li
55.4457 228.159 56.1483 228.277 56.6539 227.915 cv
57.1595 227.554 57.2766 226.852 56.9154 226.346 cv
51.9154 219.346 li
51.5543 218.841 50.8517 218.723 50.3461 219.085 cv
49.8405 219.446 49.7234 220.148 50.0845 220.654 cv
cp
56.7955 227.795 mo
61.7955 222.795 li
62.2348 222.356 62.2348 221.644 61.7955 221.204 cv
61.3562 220.765 60.6438 220.765 60.2045 221.204 cv
55.2045 226.204 li
54.7652 226.644 54.7652 227.356 55.2045 227.795 cv
55.6438 228.235 56.3562 228.235 56.7955 227.795 cv
cp
62.0595 222.378 mo
67.0595 208.378 li
67.2684 207.793 66.9635 207.15 66.3784 206.941 cv
65.7933 206.732 65.1495 207.036 64.9405 207.622 cv
59.9405 221.622 li
59.7316 222.207 60.0365 222.85 60.6216 223.059 cv
61.2067 223.268 61.8505 222.964 62.0595 222.378 cv
cp
66.7955 208.795 mo
71.7955 203.795 li
72.2348 203.356 72.2348 202.644 71.7955 202.204 cv
71.3561 201.765 70.6438 201.765 70.2045 202.204 cv
65.2045 207.204 li
64.7652 207.644 64.7652 208.356 65.2045 208.795 cv
65.6438 209.235 66.3561 209.235 66.7955 208.795 cv
cp
70.2045 203.795 mo
74.2045 207.795 li
74.6438 208.235 75.3561 208.235 75.7955 207.795 cv
76.2348 207.356 76.2348 206.644 75.7955 206.204 cv
71.7955 202.204 li
71.3561 201.765 70.6438 201.765 70.2045 202.204 cv
69.7652 202.644 69.7652 203.356 70.2045 203.795 cv
cp
74.2045 207.795 mo
79.2045 212.795 li
79.6438 213.235 80.3561 213.235 80.7955 212.795 cv
81.2348 212.356 81.2348 211.644 80.7955 211.204 cv
75.7955 206.204 li
75.3561 205.765 74.6438 205.765 74.2045 206.204 cv
73.7652 206.644 73.7652 207.356 74.2045 207.795 cv
cp
80.4178 213.045 mo
85.4178 211.045 li
85.9947 210.814 86.2753 210.159 86.0445 209.582 cv
85.8138 209.005 85.1591 208.725 84.5822 208.955 cv
79.5822 210.955 li
79.0053 211.186 78.7247 211.841 78.9555 212.418 cv
79.1862 212.995 79.8409 213.275 80.4178 213.045 cv
cp
86.05 210.404 mo
91.05 197.404 li
91.273 196.824 90.9838 196.173 90.4038 195.95 cv
89.8239 195.727 89.173 196.016 88.95 196.596 cv
83.95 209.596 li
83.7269 210.176 84.0162 210.827 84.5961 211.05 cv
85.176 211.273 85.827 210.984 86.05 210.404 cv
cp
91.05 197.404 mo
96.05 184.404 li
96.273 183.824 95.9838 183.173 95.4038 182.95 cv
94.8239 182.727 94.173 183.016 93.95 183.596 cv
88.95 196.596 li
88.7269 197.176 89.0162 197.827 89.5961 198.05 cv
90.176 198.273 90.827 197.984 91.05 197.404 cv
cp
95.2206 185.103 mo
100.221 184.103 li
100.83 183.981 101.225 183.389 101.103 182.779 cv
100.981 182.17 100.389 181.775 99.7794 181.897 cv
94.7794 182.897 li
94.1701 183.019 93.775 183.611 93.8968 184.221 cv
94.0187 184.83 94.6114 185.225 95.2206 185.103 cv
cp
99.1215 183.703 mo
103.122 188.703 li
103.51 189.188 104.218 189.267 104.703 188.878 cv
105.188 188.49 105.267 187.782 104.878 187.297 cv
100.878 182.297 li
100.49 181.812 99.7824 181.733 99.2972 182.122 cv
98.812 182.51 98.7334 183.218 99.1215 183.703 cv
cp
104.579 188.965 mo
109.579 185.965 li
110.112 185.645 110.284 184.954 109.965 184.421 cv
109.645 183.888 108.954 183.716 108.421 184.035 cv
103.421 187.035 li
102.888 187.355 102.716 188.046 103.035 188.579 cv
103.355 189.112 104.046 189.284 104.579 188.965 cv
cp
109 186.125 mo
114 186.125 li
114.621 186.125 115.125 185.621 115.125 185 cv
115.125 184.379 114.621 183.875 114 183.875 cv
109 183.875 li
108.379 183.875 107.875 184.379 107.875 185 cv
107.875 185.621 108.379 186.125 109 186.125 cv
cp
112.994 185.503 mo
117.994 195.503 li
118.272 196.059 118.947 196.284 119.503 196.006 cv
120.059 195.728 120.284 195.053 120.006 194.497 cv
115.006 184.497 li
114.728 183.941 114.053 183.716 113.497 183.994 cv
112.941 184.272 112.716 184.947 112.994 185.503 cv
cp
118.779 196.103 mo
123.779 197.103 li
124.389 197.225 124.981 196.83 125.103 196.221 cv
125.225 195.611 124.83 195.019 124.221 194.897 cv
119.221 193.897 li
118.611 193.775 118.019 194.17 117.897 194.779 cv
117.775 195.389 118.17 195.981 118.779 196.103 cv
cp
125.075 196.331 mo
129.075 183.331 li
129.258 182.737 128.925 182.107 128.331 181.925 cv
127.737 181.742 127.107 182.075 126.925 182.669 cv
122.925 195.669 li
122.742 196.263 123.075 196.893 123.669 197.075 cv
124.263 197.258 124.893 196.925 125.075 196.331 cv
cp
128.703 183.878 mo
133.703 179.878 li
134.188 179.49 134.267 178.782 133.878 178.297 cv
133.49 177.812 132.782 177.733 132.297 178.122 cv
127.297 182.122 li
126.812 182.51 126.733 183.218 127.122 183.703 cv
127.51 184.188 128.218 184.267 128.703 183.878 cv
cp
132.085 179.654 mo
137.085 186.654 li
137.446 187.159 138.148 187.277 138.654 186.915 cv
139.159 186.554 139.277 185.852 138.915 185.346 cv
133.915 178.346 li
133.554 177.841 132.852 177.723 132.346 178.085 cv
131.841 178.446 131.723 179.148 132.085 179.654 cv
cp
137.582 187.045 mo
142.582 189.045 li
143.159 189.275 143.814 188.995 144.045 188.418 cv
144.275 187.841 143.995 187.186 143.418 186.955 cv
138.418 184.955 li
137.841 184.725 137.186 185.005 136.955 185.582 cv
136.725 186.159 137.005 186.814 137.582 187.045 cv
cp
143.579 188.965 mo
148.579 185.965 li
149.112 185.645 149.284 184.954 148.965 184.421 cv
148.645 183.888 147.954 183.716 147.421 184.035 cv
142.421 187.035 li
141.888 187.355 141.716 188.046 142.035 188.579 cv
142.355 189.112 143.046 189.284 143.579 188.965 cv
cp
149.006 185.503 mo
153.006 177.503 li
153.284 176.947 153.059 176.272 152.503 175.994 cv
151.947 175.716 151.272 175.941 150.994 176.497 cv
146.994 184.497 li
146.716 185.053 146.941 185.728 147.497 186.006 cv
148.053 186.284 148.728 186.059 149.006 185.503 cv
cp
152.983 177.546 mo
157.983 168.546 li
158.285 168.003 158.089 167.318 157.546 167.017 cv
157.003 166.715 156.318 166.911 156.017 167.454 cv
151.017 176.454 li
150.715 176.997 150.911 177.682 151.454 177.983 cv
151.997 178.285 152.682 178.089 152.983 177.546 cv
cp
157.915 168.654 mo
162.915 161.654 li
163.277 161.148 163.159 160.446 162.654 160.085 cv
162.148 159.723 161.446 159.841 161.085 160.346 cv
156.085 167.346 li
155.723 167.852 155.841 168.554 156.346 168.915 cv
156.852 169.277 157.554 169.159 157.915 168.654 cv
cp
162.864 161.72 mo
167.864 155.72 li
168.262 155.243 168.198 154.534 167.72 154.136 cv
167.243 153.738 166.534 153.802 166.136 154.28 cv
161.136 160.28 li
160.738 160.757 160.802 161.466 161.28 161.864 cv
161.757 162.262 162.466 162.198 162.864 161.72 cv
cp
166.779 156.103 mo
171.779 157.103 li
172.389 157.225 172.981 156.83 173.103 156.221 cv
173.225 155.611 172.83 155.019 172.221 154.897 cv
167.221 153.897 li
166.611 153.775 166.019 154.17 165.897 154.779 cv
165.775 155.389 166.17 155.981 166.779 156.103 cv
cp
170.976 156.466 mo
175.976 167.466 li
176.233 168.031 176.9 168.281 177.466 168.024 cv
178.031 167.767 178.281 167.1 178.024 166.534 cv
173.024 155.534 li
172.767 154.969 172.1 154.719 171.534 154.976 cv
170.969 155.233 170.719 155.9 170.976 156.466 cv
cp
176.064 167.624 mo
180.064 173.624 li
180.409 174.141 181.107 174.281 181.624 173.936 cv
182.141 173.591 182.281 172.893 181.936 172.376 cv
177.936 166.376 li
177.591 165.859 176.893 165.719 176.376 166.064 cv
175.859 166.409 175.719 167.107 176.064 167.624 cv
cp
181.703 173.878 mo
186.703 169.878 li
187.188 169.49 187.267 168.782 186.878 168.297 cv
186.49 167.812 185.782 167.733 185.297 168.122 cv
180.297 172.122 li
179.812 172.51 179.733 173.218 180.122 173.703 cv
180.51 174.188 181.218 174.267 181.703 173.878 cv
cp
186.864 169.72 mo
191.864 163.72 li
192.262 163.243 192.198 162.534 191.72 162.136 cv
191.243 161.738 190.534 161.802 190.136 162.28 cv
185.136 168.28 li
184.738 168.757 184.802 169.466 185.28 169.864 cv
185.757 170.262 186.466 170.198 186.864 169.72 cv
cp
191.915 163.654 mo
196.915 156.654 li
197.277 156.148 197.159 155.446 196.654 155.085 cv
196.148 154.723 195.446 154.841 195.085 155.346 cv
190.085 162.346 li
189.723 162.852 189.841 163.554 190.346 163.915 cv
190.852 164.277 191.554 164.159 191.915 163.654 cv
cp
196.795 156.795 mo
201.795 151.795 li
202.235 151.356 202.235 150.644 201.795 150.204 cv
201.356 149.765 200.644 149.765 200.204 150.204 cv
195.204 155.204 li
194.765 155.644 194.765 156.356 195.204 156.795 cv
195.644 157.235 196.356 157.235 196.795 156.795 cv
cp
200.064 151.624 mo
204.064 157.624 li
204.409 158.141 205.107 158.281 205.624 157.936 cv
206.141 157.591 206.281 156.893 205.936 156.376 cv
201.936 150.376 li
201.591 149.859 200.893 149.719 200.376 150.064 cv
199.859 150.409 199.719 151.107 200.064 151.624 cv
cp
203.941 157.378 mo
208.941 171.378 li
209.15 171.964 209.793 172.268 210.378 172.059 cv
210.964 171.85 211.268 171.207 211.059 170.622 cv
206.059 156.622 li
205.85 156.036 205.207 155.732 204.622 155.941 cv
204.036 156.15 203.732 156.793 203.941 157.378 cv
cp
209.421 171.965 mo
214.421 174.965 li
214.954 175.284 215.645 175.112 215.965 174.579 cv
216.284 174.046 216.112 173.355 215.579 173.035 cv
210.579 170.035 li
210.046 169.716 209.355 169.888 209.035 170.421 cv
208.716 170.954 208.888 171.645 209.421 171.965 cv
cp
215.915 174.654 mo
220.915 167.654 li
221.277 167.148 221.159 166.446 220.654 166.085 cv
220.148 165.723 219.446 165.841 219.085 166.346 cv
214.085 173.346 li
213.723 173.852 213.841 174.554 214.346 174.915 cv
214.852 175.277 215.554 175.159 215.915 174.654 cv
cp
220.579 167.965 mo
225.579 164.965 li
226.112 164.645 226.284 163.954 225.965 163.421 cv
225.645 162.888 224.954 162.716 224.421 163.035 cv
219.421 166.035 li
218.888 166.355 218.716 167.046 219.035 167.579 cv
219.355 168.112 220.046 168.284 220.579 167.965 cv
cp
225.675 164.9 mo
229.675 161.9 li
230.172 161.527 230.273 160.822 229.9 160.325 cv
229.527 159.828 228.822 159.727 228.325 160.1 cv
224.325 163.1 li
223.828 163.473 223.727 164.178 224.1 164.675 cv
224.473 165.172 225.178 165.273 225.675 164.9 cv
cp
229.915 161.654 mo
234.915 154.654 li
235.277 154.148 235.159 153.446 234.654 153.085 cv
234.148 152.723 233.446 152.841 233.085 153.346 cv
228.085 160.346 li
227.723 160.852 227.841 161.554 228.346 161.915 cv
228.852 162.277 229.554 162.159 229.915 161.654 cv
cp
233.779 155.103 mo
238.779 156.103 li
239.389 156.225 239.981 155.83 240.103 155.221 cv
240.225 154.611 239.83 154.019 239.221 153.897 cv
234.221 152.897 li
233.611 152.775 233.019 153.17 232.897 153.779 cv
232.775 154.389 233.17 154.981 233.779 155.103 cv
cp
237.962 155.433 mo
242.962 167.433 li
243.201 168.006 243.859 168.277 244.433 168.038 cv
245.006 167.799 245.277 167.141 245.038 166.567 cv
240.038 154.567 li
239.799 153.994 239.141 153.723 238.567 153.962 cv
237.994 154.201 237.723 154.859 237.962 155.433 cv
cp
243.582 168.045 mo
248.582 170.045 li
249.159 170.275 249.814 169.995 250.045 169.418 cv
250.275 168.841 249.995 168.186 249.418 167.955 cv
244.418 165.955 li
243.841 165.725 243.186 166.005 242.955 166.582 cv
242.725 167.159 243.005 167.814 243.582 168.045 cv
cp
250.028 169.457 mo
254.028 160.457 li
254.28 159.889 254.025 159.224 253.457 158.972 cv
252.889 158.72 252.224 158.975 251.972 159.543 cv
247.972 168.543 li
247.72 169.111 247.975 169.776 248.543 170.028 cv
249.111 170.28 249.776 170.025 250.028 169.457 cv
cp
253.579 160.965 mo
258.579 157.965 li
259.112 157.645 259.284 156.954 258.965 156.421 cv
258.645 155.888 257.954 155.716 257.421 156.035 cv
252.421 159.035 li
251.888 159.355 251.716 160.046 252.035 160.579 cv
252.355 161.112 253.046 161.284 253.579 160.965 cv
cp
257.204 157.795 mo
262.204 162.795 li
262.644 163.235 263.356 163.235 263.795 162.795 cv
264.235 162.356 264.235 161.644 263.795 161.204 cv
258.795 156.204 li
258.356 155.765 257.644 155.765 257.204 156.204 cv
256.765 156.644 256.765 157.356 257.204 157.795 cv
cp
261.994 162.503 mo
266.994 172.503 li
267.272 173.059 267.947 173.284 268.503 173.006 cv
269.059 172.728 269.284 172.053 269.006 171.497 cv
264.006 161.497 li
263.728 160.941 263.053 160.716 262.497 160.994 cv
261.941 161.272 261.716 161.947 261.994 162.503 cv
cp
267.085 172.654 mo
272.085 179.654 li
272.446 180.159 273.148 180.277 273.654 179.915 cv
274.159 179.554 274.277 178.852 273.915 178.346 cv
268.915 171.346 li
268.554 170.841 267.852 170.723 267.346 171.085 cv
266.841 171.446 266.723 172.148 267.085 172.654 cv
cp
273.864 179.72 mo
278.864 173.72 li
279.262 173.243 279.198 172.534 278.72 172.136 cv
278.243 171.738 277.534 171.802 277.136 172.28 cv
272.136 178.28 li
271.738 178.757 271.802 179.466 272.28 179.864 cv
272.757 180.262 273.466 180.198 273.864 179.72 cv
cp
278.503 174.006 mo
282.503 172.006 li
283.059 171.728 283.284 171.053 283.006 170.497 cv
282.728 169.941 282.053 169.716 281.497 169.994 cv
277.497 171.994 li
276.941 172.272 276.716 172.947 276.994 173.503 cv
277.272 174.059 277.947 174.284 278.503 174.006 cv
cp
281.046 171.596 mo
286.046 179.596 li
286.375 180.123 287.069 180.283 287.596 179.954 cv
288.123 179.625 288.283 178.931 287.954 178.404 cv
282.954 170.404 li
282.625 169.877 281.931 169.717 281.404 170.046 cv
280.877 170.375 280.717 171.069 281.046 171.596 cv
cp
286.582 180.045 mo
291.582 182.045 li
292.159 182.275 292.814 181.995 293.045 181.418 cv
293.275 180.841 292.995 180.186 292.418 179.955 cv
287.418 177.955 li
286.841 177.725 286.186 178.005 285.955 178.582 cv
285.725 179.159 286.005 179.814 286.582 180.045 cv
cp
292.579 181.965 mo
297.579 178.965 li
298.112 178.645 298.284 177.954 297.965 177.421 cv
297.645 176.888 296.954 176.716 296.421 177.035 cv
291.421 180.035 li
290.888 180.355 290.716 181.046 291.035 181.579 cv
291.355 182.112 292.046 182.284 292.579 181.965 cv
cp
296.136 178.72 mo
301.136 184.72 li
301.534 185.198 302.243 185.262 302.72 184.864 cv
303.198 184.466 303.262 183.757 302.864 183.28 cv
297.864 177.28 li
297.466 176.802 296.757 176.738 296.28 177.136 cv
295.802 177.534 295.738 178.243 296.136 178.72 cv
cp
300.955 184.418 mo
304.955 194.418 li
305.186 194.995 305.841 195.275 306.418 195.045 cv
306.995 194.814 307.275 194.159 307.045 193.582 cv
303.045 183.582 li
302.814 183.005 302.159 182.725 301.582 182.955 cv
301.005 183.186 300.725 183.841 300.955 184.418 cv
cp
305.421 194.965 mo
310.421 197.965 li
310.954 198.284 311.645 198.112 311.965 197.579 cv
312.284 197.046 312.112 196.355 311.579 196.035 cv
306.579 193.035 li
306.046 192.716 305.355 192.888 305.035 193.421 cv
304.716 193.954 304.888 194.645 305.421 194.965 cv
cp
310.421 197.965 mo
315.421 200.965 li
315.954 201.284 316.645 201.112 316.965 200.579 cv
317.284 200.046 317.112 199.355 316.579 199.035 cv
311.579 196.035 li
311.046 195.716 310.355 195.888 310.035 196.421 cv
309.716 196.954 309.888 197.645 310.421 197.965 cv
cp
315.779 201.103 mo
320.779 202.103 li
321.389 202.225 321.981 201.83 322.103 201.221 cv
322.225 200.611 321.83 200.019 321.221 199.897 cv
316.221 198.897 li
315.611 198.775 315.019 199.17 314.897 199.779 cv
314.775 200.389 315.17 200.981 315.779 201.103 cv
cp
321.915 201.654 mo
326.915 194.654 li
327.277 194.148 327.159 193.446 326.654 193.085 cv
326.148 192.723 325.446 192.841 325.085 193.346 cv
320.085 200.346 li
319.723 200.852 319.841 201.554 320.346 201.915 cv
320.852 202.277 321.554 202.159 321.915 201.654 cv
cp
327.028 194.457 mo
331.028 185.457 li
331.28 184.889 331.025 184.224 330.457 183.972 cv
329.889 183.72 329.224 183.975 328.972 184.543 cv
324.972 193.543 li
324.72 194.111 324.975 194.776 325.543 195.028 cv
326.111 195.28 326.776 195.025 327.028 194.457 cv
cp
329.136 185.72 mo
334.136 191.72 li
334.534 192.198 335.243 192.262 335.72 191.864 cv
336.198 191.466 336.262 190.757 335.864 190.28 cv
330.864 184.28 li
330.466 183.802 329.757 183.738 329.28 184.136 cv
328.802 184.534 328.738 185.243 329.136 185.72 cv
cp
333.976 191.466 mo
338.976 202.466 li
339.233 203.031 339.9 203.281 340.466 203.024 cv
341.031 202.767 341.281 202.1 341.024 201.534 cv
336.024 190.534 li
335.767 189.969 335.1 189.719 334.534 189.976 cv
333.969 190.233 333.719 190.9 333.976 191.466 cv
cp
340.221 203.103 mo
345.221 202.103 li
345.83 201.981 346.225 201.389 346.103 200.779 cv
345.981 200.17 345.389 199.775 344.779 199.897 cv
339.779 200.897 li
339.17 201.019 338.775 201.611 338.897 202.221 cv
339.019 202.83 339.611 203.225 340.221 203.103 cv
cp
344.582 202.045 mo
349.582 204.045 li
350.159 204.275 350.814 203.995 351.045 203.418 cv
351.275 202.841 350.995 202.186 350.418 201.955 cv
345.418 199.955 li
344.841 199.725 344.186 200.005 343.955 200.582 cv
343.725 201.159 344.005 201.814 344.582 202.045 cv
cp
349.085 203.654 mo
354.085 210.654 li
354.446 211.159 355.148 211.277 355.654 210.915 cv
356.159 210.554 356.277 209.852 355.915 209.346 cv
350.915 202.346 li
350.554 201.841 349.852 201.723 349.346 202.085 cv
348.841 202.446 348.723 203.148 349.085 203.654 cv
cp
355 211.125 mo
359 211.125 li
359.621 211.125 360.125 210.621 360.125 210 cv
360.125 209.379 359.621 208.875 359 208.875 cv
355 208.875 li
354.379 208.875 353.875 209.379 353.875 210 cv
353.875 210.621 354.379 211.125 355 211.125 cv
cp
359.703 210.878 mo
364.703 206.878 li
365.188 206.49 365.267 205.782 364.878 205.297 cv
364.49 204.812 363.782 204.733 363.297 205.122 cv
358.297 209.122 li
357.812 209.51 357.733 210.218 358.122 210.703 cv
358.51 211.188 359.218 211.267 359.703 210.878 cv
cp
363.046 206.596 mo
368.046 214.596 li
368.375 215.123 369.069 215.283 369.596 214.954 cv
370.123 214.625 370.283 213.931 369.954 213.404 cv
364.954 205.404 li
364.625 204.877 363.931 204.717 363.404 205.046 cv
362.877 205.375 362.717 206.069 363.046 206.596 cv
cp
367.941 214.378 mo
372.941 228.378 li
373.15 228.964 373.793 229.268 374.378 229.059 cv
374.964 228.85 375.268 228.207 375.059 227.622 cv
370.059 213.622 li
369.85 213.036 369.207 212.732 368.622 212.941 cv
368.036 213.15 367.732 213.793 367.941 214.378 cv
cp
374 229.125 mo
379 229.125 li
379.621 229.125 380.125 228.621 380.125 228 cv
380.125 227.379 379.621 226.875 379 226.875 cv
374 226.875 li
373.379 226.875 372.875 227.379 372.875 228 cv
372.875 228.621 373.379 229.125 374 229.125 cv
cp
379.795 228.795 mo
383.795 224.795 li
384.235 224.356 384.235 223.644 383.795 223.204 cv
383.356 222.765 382.644 222.765 382.204 223.204 cv
378.204 227.204 li
377.765 227.644 377.765 228.356 378.204 228.795 cv
378.644 229.235 379.356 229.235 379.795 228.795 cv
cp
382.204 224.795 mo
387.204 229.795 li
387.644 230.235 388.356 230.235 388.795 229.795 cv
389.235 229.356 389.235 228.644 388.795 228.204 cv
383.795 223.204 li
383.356 222.765 382.644 222.765 382.204 223.204 cv
381.765 223.644 381.765 224.356 382.204 224.795 cv
cp
387.204 229.795 mo
392.204 234.795 li
392.644 235.235 393.356 235.235 393.795 234.795 cv
394.235 234.356 394.235 233.644 393.795 233.204 cv
388.795 228.204 li
388.356 227.765 387.644 227.765 387.204 228.204 cv
386.765 228.644 386.765 229.356 387.204 229.795 cv
cp
392.582 235.045 mo
397.582 237.045 li
398.159 237.275 398.814 236.995 399.045 236.418 cv
399.275 235.841 398.995 235.186 398.418 234.955 cv
393.418 232.955 li
392.841 232.725 392.186 233.005 391.955 233.582 cv
391.725 234.159 392.005 234.814 392.582 235.045 cv
cp
398.418 237.045 mo
403.418 235.045 li
403.995 234.814 404.275 234.159 404.045 233.582 cv
403.814 233.005 403.159 232.725 402.582 232.955 cv
397.582 234.955 li
397.005 235.186 396.725 235.841 396.955 236.418 cv
397.186 236.995 397.841 237.275 398.418 237.045 cv
cp
403.795 234.795 mo
407.795 230.795 li
408.235 230.356 408.235 229.644 407.795 229.204 cv
407.356 228.765 406.644 228.765 406.204 229.204 cv
402.204 233.204 li
401.765 233.644 401.765 234.356 402.204 234.795 cv
402.644 235.235 403.356 235.235 403.795 234.795 cv
cp
406.582 231.045 mo
411.582 233.045 li
412.159 233.275 412.814 232.995 413.045 232.418 cv
413.275 231.841 412.995 231.186 412.418 230.955 cv
407.418 228.955 li
406.841 228.725 406.186 229.005 405.955 229.582 cv
405.725 230.159 406.005 230.814 406.582 231.045 cv
cp
411.421 232.965 mo
416.421 235.965 li
416.954 236.284 417.645 236.112 417.965 235.579 cv
418.284 235.046 418.112 234.355 417.579 234.035 cv
412.579 231.035 li
412.046 230.716 411.355 230.888 411.035 231.421 cv
410.716 231.954 410.888 232.645 411.421 232.965 cv
cp
416.297 235.878 mo
421.297 239.878 li
421.782 240.267 422.49 240.188 422.878 239.703 cv
423.267 239.218 423.188 238.51 422.703 238.122 cv
417.703 234.122 li
417.218 233.733 416.51 233.812 416.122 234.297 cv
415.733 234.782 415.812 235.49 416.297 235.878 cv
cp
421.136 239.72 mo
426.136 245.72 li
426.534 246.198 427.243 246.262 427.72 245.864 cv
428.198 245.466 428.262 244.757 427.864 244.28 cv
422.864 238.28 li
422.466 237.802 421.757 237.738 421.28 238.136 cv
420.802 238.534 420.738 239.243 421.136 239.72 cv
cp
427.579 245.965 mo
432.579 242.965 li
433.112 242.645 433.284 241.954 432.965 241.421 cv
432.645 240.888 431.954 240.716 431.421 241.035 cv
426.421 244.035 li
425.888 244.355 425.716 245.046 426.035 245.579 cv
426.355 246.112 427.046 246.284 427.579 245.965 cv
cp
432.936 242.624 mo
436.936 236.624 li
437.281 236.107 437.141 235.409 436.624 235.064 cv
436.107 234.719 435.409 234.859 435.064 235.376 cv
431.064 241.376 li
430.719 241.893 430.859 242.591 431.376 242.936 cv
431.893 243.281 432.591 243.141 432.936 242.624 cv
cp
435.046 236.596 mo
440.046 244.596 li
440.375 245.123 441.069 245.283 441.596 244.954 cv
442.123 244.625 442.283 243.931 441.954 243.404 cv
436.954 235.404 li
436.625 234.877 435.931 234.717 435.404 235.046 cv
434.877 235.375 434.717 236.069 435.046 236.596 cv
cp
439.921 244.317 mo
444.921 261.317 li
445.096 261.913 445.721 262.255 446.317 262.079 cv
446.913 261.904 447.255 261.279 447.079 260.683 cv
442.079 243.683 li
441.904 243.086 441.279 242.745 440.683 242.921 cv
440.086 243.096 439.745 243.721 439.921 244.317 cv
cp
445.297 261.878 mo
450.297 265.878 li
450.782 266.267 451.49 266.188 451.878 265.703 cv
452.267 265.218 452.188 264.51 451.703 264.122 cv
446.703 260.122 li
446.218 259.733 445.51 259.812 445.122 260.297 cv
444.733 260.782 444.812 261.49 445.297 261.878 cv
cp
452.05 265.404 mo
457.05 252.404 li
457.273 251.824 456.984 251.173 456.404 250.95 cv
455.824 250.727 455.173 251.016 454.95 251.596 cv
449.95 264.596 li
449.727 265.176 450.016 265.827 450.596 266.05 cv
451.176 266.273 451.827 265.984 452.05 265.404 cv
cp
456.977 252.558 mo
460.977 245.558 li
461.285 245.019 461.098 244.331 460.558 244.023 cv
460.019 243.715 459.331 243.902 459.023 244.442 cv
455.023 251.442 li
454.715 251.981 454.902 252.669 455.442 252.977 cv
455.981 253.285 456.668 253.098 456.977 252.558 cv
cp
459.421 245.965 mo
464.421 248.965 li
464.954 249.284 465.645 249.112 465.965 248.579 cv
466.284 248.046 466.112 247.355 465.579 247.035 cv
460.579 244.035 li
460.046 243.716 459.355 243.888 459.035 244.421 cv
458.716 244.954 458.888 245.645 459.421 245.965 cv
cp
464.582 249.045 mo
469.582 251.045 li
470.159 251.275 470.814 250.995 471.045 250.418 cv
471.275 249.841 470.995 249.186 470.418 248.955 cv
465.418 246.955 li
464.841 246.725 464.186 247.005 463.955 247.582 cv
463.725 248.159 464.005 248.814 464.582 249.045 cv
cp
470.579 250.965 mo
475.579 247.965 li
476.112 247.645 476.284 246.954 475.965 246.421 cv
475.645 245.888 474.954 245.716 474.421 246.035 cv
469.421 249.035 li
468.888 249.355 468.716 250.046 469.035 250.579 cv
469.355 251.112 470.046 251.284 470.579 250.965 cv
cp
475.703 247.878 mo
480.703 243.878 li
481.188 243.49 481.267 242.782 480.878 242.297 cv
480.49 241.812 479.782 241.733 479.297 242.122 cv
474.297 246.122 li
473.812 246.51 473.733 247.218 474.122 247.703 cv
474.51 248.188 475.218 248.267 475.703 247.878 cv
cp
478.994 243.503 mo
482.994 251.503 li
483.272 252.059 483.947 252.284 484.503 252.006 cv
485.059 251.728 485.284 251.053 485.006 250.497 cv
481.006 242.497 li
480.728 241.941 480.053 241.716 479.497 241.994 cv
478.941 242.272 478.716 242.947 478.994 243.503 cv
cp
482.941 251.378 mo
487.941 265.378 li
488.15 265.964 488.793 266.268 489.378 266.059 cv
489.964 265.85 490.268 265.207 490.059 264.622 cv
485.059 250.622 li
484.85 250.036 484.207 249.732 483.622 249.941 cv
483.036 250.15 482.732 250.793 482.941 251.378 cv
cp
488.136 265.72 mo
493.136 271.72 li
493.534 272.198 494.243 272.262 494.72 271.864 cv
495.198 271.466 495.262 270.757 494.864 270.28 cv
489.864 264.28 li
489.466 263.802 488.757 263.738 488.28 264.136 cv
487.802 264.534 487.738 265.243 488.136 265.72 cv
cp
494.418 272.045 mo
499.418 270.045 li
499.995 269.814 500.275 269.159 500.045 268.582 cv
499.814 268.005 499.159 267.725 498.582 267.955 cv
493.582 269.955 li
493.005 270.186 492.725 270.841 492.955 271.418 cv
493.186 271.995 493.841 272.275 494.418 272.045 cv
cp
499.864 269.72 mo
504.864 263.72 li
505.262 263.243 505.198 262.534 504.72 262.136 cv
504.243 261.738 503.534 261.802 503.136 262.28 cv
498.136 268.28 li
497.738 268.757 497.802 269.466 498.28 269.864 cv
498.757 270.262 499.466 270.198 499.864 269.72 cv
cp
504.795 263.795 mo
509.795 258.795 li
510.235 258.356 510.235 257.644 509.795 257.204 cv
509.356 256.765 508.644 256.765 508.204 257.204 cv
503.204 262.204 li
502.765 262.644 502.765 263.356 503.204 263.795 cv
503.644 264.235 504.356 264.235 504.795 263.795 cv
cp
509.273 259.091 mo
513.273 258.091 li
513.876 257.941 514.242 257.33 514.091 256.727 cv
513.941 256.124 513.33 255.758 512.727 255.909 cv
508.727 256.909 li
508.124 257.059 507.758 257.67 507.909 258.273 cv
508.059 258.876 508.67 259.242 509.273 259.091 cv
cp
512.779 258.103 mo
517.779 259.103 li
518.389 259.225 518.981 258.83 519.103 258.221 cv
519.225 257.611 518.83 257.019 518.221 256.897 cv
513.221 255.897 li
512.611 255.775 512.019 256.17 511.897 256.779 cv
511.775 257.389 512.17 257.981 512.779 258.103 cv
cp
517.421 258.965 mo
522.421 261.965 li
522.954 262.284 523.645 262.112 523.965 261.579 cv
524.284 261.046 524.112 260.355 523.579 260.035 cv
518.579 257.035 li
518.046 256.716 517.355 256.888 517.035 257.421 cv
516.716 257.954 516.888 258.645 517.421 258.965 cv
cp
522.204 261.795 mo
527.204 266.795 li
527.644 267.235 528.356 267.235 528.795 266.795 cv
529.235 266.356 529.235 265.644 528.795 265.204 cv
523.795 260.204 li
523.356 259.765 522.644 259.765 522.204 260.204 cv
521.765 260.644 521.765 261.356 522.204 261.795 cv
cp
527.779 267.103 mo
532.779 268.103 li
533.389 268.225 533.981 267.83 534.103 267.221 cv
534.225 266.611 533.83 266.019 533.221 265.897 cv
528.221 264.897 li
527.611 264.775 527.019 265.17 526.897 265.779 cv
526.775 266.389 527.17 266.981 527.779 267.103 cv
cp
533.675 267.9 mo
537.675 264.9 li
538.172 264.527 538.273 263.822 537.9 263.325 cv
537.527 262.828 536.822 262.727 536.325 263.1 cv
532.325 266.1 li
531.828 266.473 531.727 267.178 532.1 267.675 cv
532.473 268.172 533.178 268.273 533.675 267.9 cv
cp
536.779 265.103 mo
541.779 266.103 li
542.389 266.225 542.981 265.83 543.103 265.221 cv
543.225 264.611 542.83 264.019 542.221 263.897 cv
537.221 262.897 li
536.611 262.775 536.019 263.17 535.897 263.779 cv
535.775 264.389 536.17 264.981 536.779 265.103 cv
cp
541.204 265.795 mo
546.204 270.795 li
546.644 271.235 547.356 271.235 547.795 270.795 cv
548.235 270.356 548.235 269.644 547.795 269.204 cv
542.795 264.204 li
542.356 263.765 541.644 263.765 541.204 264.204 cv
540.765 264.644 540.765 265.356 541.204 265.795 cv
cp
546.311 270.89 mo
551.311 274.761 li
551.803 275.141 552.509 275.051 552.89 274.56 cv
553.27 274.069 553.18 273.362 552.689 272.982 cv
547.689 269.11 li
547.197 268.73 546.491 268.82 546.11 269.311 cv
545.73 269.803 545.82 270.509 546.311 270.89 cv
cp
552.785 274.677 mo
557.785 269.806 li
558.23 269.372 558.239 268.66 557.806 268.215 cv
557.372 267.77 556.66 267.761 556.215 268.194 cv
551.215 273.065 li
550.77 273.499 550.761 274.211 551.194 274.656 cv
551.628 275.101 552.34 275.11 552.785 274.677 cv
cp
558.057 269.384 mo
562.057 258.384 li
562.27 257.801 561.968 257.155 561.384 256.943 cv
560.801 256.73 560.155 257.032 559.943 257.616 cv
555.943 268.616 li
555.73 269.199 556.032 269.845 556.615 270.057 cv
557.199 270.27 557.845 269.968 558.057 269.384 cv
cp
561.418 259.045 mo
566.418 257.045 li
566.995 256.814 567.275 256.159 567.044 255.582 cv
566.814 255.005 566.159 254.725 565.582 254.955 cv
560.582 256.955 li
560.005 257.186 559.725 257.841 559.955 258.418 cv
560.186 258.995 560.841 259.275 561.418 259.045 cv
cp
565.085 256.654 mo
570.085 263.654 li
570.446 264.159 571.148 264.277 571.654 263.915 cv
572.159 263.554 572.277 262.852 571.915 262.346 cv
566.915 255.346 li
566.554 254.841 565.852 254.723 565.346 255.085 cv
564.841 255.446 564.723 256.148 565.085 256.654 cv
cp
571.579 263.965 mo
576.579 260.965 li
577.112 260.645 577.284 259.954 576.965 259.421 cv
576.645 258.888 575.954 258.716 575.421 259.035 cv
570.421 262.035 li
569.888 262.355 569.716 263.046 570.035 263.579 cv
570.355 264.112 571.046 264.284 571.579 263.965 cv
cp
577.024 260.466 mo
582.024 249.466 li
582.281 248.9 582.031 248.233 581.466 247.976 cv
580.9 247.719 580.233 247.969 579.976 248.534 cv
574.976 259.534 li
574.719 260.1 574.969 260.767 575.534 261.024 cv
576.1 261.281 576.767 261.031 577.024 260.466 cv
cp
582.006 249.503 mo
586.006 241.503 li
586.284 240.947 586.059 240.272 585.503 239.994 cv
584.947 239.716 584.272 239.941 583.994 240.497 cv
579.994 248.497 li
579.716 249.053 579.941 249.728 580.497 250.006 cv
581.053 250.284 581.728 250.059 582.006 249.503 cv
cp
585 242.125 mo
590 242.125 li
590.621 242.125 591.125 241.621 591.125 241 cv
591.125 240.379 590.621 239.875 590 239.875 cv
585 239.875 li
584.379 239.875 583.875 240.379 583.875 241 cv
583.875 241.621 584.379 242.125 585 242.125 cv
cp
589.779 242.103 mo
594.779 243.103 li
595.389 243.225 595.981 242.83 596.103 242.221 cv
596.225 241.611 595.83 241.019 595.221 240.897 cv
590.221 239.897 li
589.611 239.775 589.019 240.17 588.897 240.779 cv
588.775 241.389 589.17 241.981 589.779 242.103 cv
cp
595.703 242.878 mo
600.703 238.878 li
601.188 238.49 601.267 237.782 600.878 237.297 cv
600.49 236.812 599.782 236.733 599.297 237.122 cv
594.297 241.122 li
593.812 241.51 593.733 242.218 594.122 242.703 cv
594.51 243.188 595.218 243.267 595.703 242.878 cv
cp
600.579 238.965 mo
605.579 235.965 li
606.112 235.645 606.284 234.954 605.965 234.421 cv
605.645 233.888 604.954 233.716 604.421 234.035 cv
599.421 237.035 li
598.888 237.355 598.716 238.046 599.035 238.579 cv
599.355 239.112 600.046 239.284 600.579 238.965 cv
cp
604.204 235.795 mo
609.204 240.795 li
609.644 241.235 610.356 241.235 610.795 240.795 cv
611.235 240.356 611.235 239.644 610.795 239.204 cv
605.795 234.204 li
605.356 233.765 604.644 233.765 604.204 234.204 cv
603.765 234.644 603.765 235.356 604.204 235.795 cv
cp
608.994 240.503 mo
612.994 248.503 li
613.272 249.059 613.947 249.284 614.503 249.006 cv
615.059 248.728 615.284 248.053 615.006 247.497 cv
611.006 239.497 li
610.728 238.941 610.053 238.716 609.497 238.994 cv
608.941 239.272 608.716 239.947 608.994 240.503 cv
cp
614.221 249.103 mo
619.221 248.103 li
619.83 247.981 620.225 247.389 620.103 246.779 cv
619.981 246.17 619.389 245.775 618.779 245.897 cv
613.779 246.897 li
613.17 247.019 612.775 247.611 612.897 248.221 cv
613.019 248.83 613.611 249.225 614.221 249.103 cv
cp
619.864 247.72 mo
624.864 241.72 li
625.262 241.243 625.198 240.534 624.72 240.136 cv
624.243 239.738 623.534 239.802 623.136 240.28 cv
618.136 246.28 li
617.738 246.757 617.802 247.466 618.28 247.864 cv
618.757 248.262 619.466 248.198 619.864 247.72 cv
cp
623.421 241.965 mo
628.421 244.965 li
628.954 245.284 629.645 245.112 629.965 244.579 cv
630.284 244.046 630.112 243.355 629.579 243.035 cv
624.579 240.035 li
624.046 239.716 623.355 239.888 623.035 240.421 cv
622.716 240.954 622.888 241.645 623.421 241.965 cv
cp
628.421 244.965 mo
633.421 247.965 li
633.954 248.284 634.645 248.112 634.965 247.579 cv
635.284 247.046 635.112 246.355 634.579 246.035 cv
629.579 243.035 li
629.046 242.716 628.355 242.888 628.035 243.421 cv
627.716 243.954 627.888 244.645 628.421 244.965 cv
cp
634.503 248.006 mo
638.503 246.006 li
639.059 245.728 639.284 245.053 639.006 244.497 cv
638.728 243.941 638.053 243.716 637.497 243.994 cv
633.497 245.994 li
632.941 246.272 632.716 246.947 632.994 247.503 cv
633.272 248.059 633.947 248.284 634.503 248.006 cv
cp
638.579 245.965 mo
643.579 242.965 li
644.112 242.645 644.284 241.954 643.965 241.421 cv
643.645 240.888 642.954 240.716 642.421 241.035 cv
637.421 244.035 li
636.888 244.355 636.716 245.046 637.035 245.579 cv
637.355 246.112 638.046 246.284 638.579 245.965 cv
cp
643.703 242.878 mo
648.703 238.878 li
649.188 238.49 649.267 237.782 648.878 237.297 cv
648.49 236.812 647.782 236.733 647.297 237.122 cv
642.297 241.122 li
641.812 241.51 641.733 242.218 642.122 242.703 cv
642.51 243.188 643.218 243.267 643.703 242.878 cv
cp
648.925 238.64 mo
653.767 231.64 li
654.12 231.129 653.993 230.428 653.482 230.075 cv
652.971 229.721 652.27 229.849 651.917 230.36 cv
647.075 237.36 li
646.721 237.871 646.849 238.572 647.36 238.925 cv
647.871 239.279 648.572 239.151 648.925 238.64 cv
cp
false sop
0.156863 0.745098 0.623529 0.0235294 cmyk
f
grestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
false sop
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: ArialMT Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /ArialMT def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 45 /hyphen putdup 49 /one putdef/FontBBox {-665 -325 2000 1006} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings4 dict dup begin/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7C8A936AA182F5809A9> |-/space <1C60D8A8C9B854D00D> |-/hyphen <1C60D8A8C9B81F2C3A78A5675B101A923F2D2A8AB56C> |-/one <1C60D8A8C9B7EF32247817CBAD74894E625B0BAD23872C089E8D91F92FE1B529DBABA181AB8B085B7A00FC86C529813E9B576642> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/SFDWVN+ArialMT /ArialMT findfont ct_VMDictPut/SFDWVN+ArialMT*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen 3{/.notdef}rp /one 206{/.notdef}rp]SFDWVN+ArialMT nfSFDWVN+ArialMT*1 [10 -1.22465e-15 -1.22465e-15 -10 0 0 ]msf21.9014 417.945 mo(-1 )[3.33008 5.56152 0 ]xshgrestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
false sop
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginSFDWVN+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B854D0F4604C2A88D29523E6F8C6> |-/zero <1C60D8A8C9B7EF322B1082CBA0BF9C14E99A3DA73C31B9142A392BD3ABC1EA97FF39C814FAC04D646DD2C4A98FCAF9A9470BD1CDA748490BF1B6225A10425162B711F636C55967253E957B919DCC3F666292C622E3ED0D587E9E568E31D888BB4F8FA5748005C40596B5B6BF48502A62C5A69962DBA8DFCFAE3F282BC60C6C207F4C9D9AD32681DD3B2E0F2C2045F707B1BB6597DD9D355BD3D00BE3A5B546505C954A88> |-/five <1C60D8A8C9B7EF322B11AFD4001C6D393B64E9DE4ADCB9C7DBD29001BCD9C24204BCA349E6D6727DDD519B4607896591269B0F423E62F04083C8D4AAB63F3153F8354DAF7BF13702FC0166656CF2542F30CE9F35F189C04CCF389EF200B50CB6EEE2DB668946DD84852A4BE0E462B71D963D0D41B1A42CCC4B98AFEC49372EF96DD9EB13A793559C13CFDFE477> |-/seven <1C60D8A8C9B7EF32245185D6A5516F33DB78352C4AC565B22360E031CB3B71A1D11654727B1436E7590FC689EA5F1279CA132C8529B81FF9BDC95FE0F55546101EE3> |-systemdict /gcheck known {setglobal} if end {end} ifendSFDWVN+ArialMT /Encoding getdup 46 /period putdup 48 /zero putdup 53 /five putdup 55 /seven putpop%ADOEndSubsetFont
/SFDWVN+ArialMT*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one 3{/.notdef}rp /five /.notdef /seven 200{/.notdef}rp]SFDWVN+ArialMT nfSFDWVN+ArialMT*1 [10 -1.22465e-15 -1.22465e-15 -10 0 0 ]msf8 367.952 mo(-0.75 )[3.33008 5.56152 2.77832 5.56152 5.56152 0 ]xshgrestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
false sop
0.74902 0.678431 0.670588 0.901961 cmyk
SFDWVN+ArialMT*1 [10 -1.22465e-15 -1.22465e-15 -10 0 0 ]msf13.5615 317.959 mo(-0.5 )[3.33008 5.56152 2.77832 5.56152 0 ]xshgrestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
false sop
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginSFDWVN+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7EF322B3EBC745A0BBBAC411180C089B13E648172E07912D1BA378FD965B994D86994B65582FD434477626CA0A7A4AA353654D41B127367E2BE1B714FF63CE28DAC81B61A78F94AD3218D524244E3D9732CC5A4165C96E7ADC9605690D1ECC190DFB9D5017E24EDE1D6B83BBD5FCE6B540AFB666DD6E17D0C90E5976007C04DC3CD2FBFFCA768526960F8706ECECD> |-systemdict /gcheck known {setglobal} if end {end} ifendSFDWVN+ArialMT /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/SFDWVN+ArialMT*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two 2{/.notdef}rp /five /.notdef /seven 200{/.notdef}rp]SFDWVN+ArialMT nfSFDWVN+ArialMT*1 [10 -1.22465e-15 -1.22465e-15 -10 0 0 ]msf8 267.966 mo(-0.25 )[3.33008 5.56152 2.77832 5.56152 5.56152 0 ]xshgrestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
false sop
0.74902 0.678431 0.670588 0.901961 cmyk
SFDWVN+ArialMT*1 [10 -1.22465e-15 -1.22465e-15 -10 0 0 ]msf25.2314 217.973 mo(0 )[5.56152 0 ]xshgrestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
false sop
0.74902 0.678431 0.670588 0.901961 cmyk
SFDWVN+ArialMT*1 [10 -1.22465e-15 -1.22465e-15 -10 0 0 ]msf11.3301 167.979 mo(0.25 )[5.56152 2.77832 5.56152 5.56152 0 ]xshgrestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
false sop
0.74902 0.678431 0.670588 0.901961 cmyk
SFDWVN+ArialMT*1 [10 -1.22465e-15 -1.22465e-15 -10 0 0 ]msf16.8916 117.985 mo(0.5 )[5.56152 2.77832 5.56152 0 ]xshgrestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
false sop
0.74902 0.678431 0.670588 0.901961 cmyk
SFDWVN+ArialMT*1 [10 -1.22465e-15 -1.22465e-15 -10 0 0 ]msf11.3301 67.9922 mo(0.75 )[5.56152 2.77832 5.56152 5.56152 0 ]xshgrestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
false sop
0.74902 0.678431 0.670588 0.901961 cmyk
SFDWVN+ArialMT*1 [10 -1.22465e-15 -1.22465e-15 -10 0 0 ]msf25.2314 17.999 mo(1 )[5.56152 0 ]xshgrestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
false sop
0.74902 0.678431 0.670588 0.901961 cmyk
SFDWVN+ArialMT*1 [10 -1.22465e-15 -1.22465e-15 -10 0 0 ]msf39.0171 230.006 mo(1 )[5.56152 0 ]xshgrestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
false sop
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginSFDWVN+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/nine <1C60D8A8C9B7EF322B1E3B1A79A1DA03E10E600D068C6F2A2C380B0F6DEBD4D4DD1CC12D66AEECD714986D0BB404BEEE797B931765A09DB6972620435C3E53C33E82E82293552FE3F4B4A9CF87D2D3960A335325D9064F969F569869D5BECFFFACFCA41CE671D232207B2A9F695CAD03F11715AE00BA6E4E4DDB0F807E169B9324CB5646DCC83A5DE270DE3BAEFD03D20E077B3A9C59CEC5C162A3BD3072425BBF0BAF6222E938CACE57A2C4D75634AE3A010D0148B506BD06198AAAA27D1742624D1FE8845D19FF21CDB94B022766F89FD7433D600DF30C7FA27B03E17188994F16> |-systemdict /gcheck known {setglobal} if end {end} ifendSFDWVN+ArialMT /Encoding getdup 57 /nine putpop%ADOEndSubsetFont
/SFDWVN+ArialMT*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two 2{/.notdef}rp /five /.notdef /seven /.notdef /nine 198{/.notdef}rp]SFDWVN+ArialMT nfSFDWVN+ArialMT*1 [10 -1.22465e-15 -1.22465e-15 -10 0 0 ]msf77.5083 230.006 mo(9 )[5.56152 0 ]xshgrestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
false sop
0.74902 0.678431 0.670588 0.901961 cmyk
SFDWVN+ArialMT*1 [10 -1.22465e-15 -1.22465e-15 -10 0 0 ]msf113.218 230.006 mo(17 )[5.56152 5.56152 0 ]xshgrestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
false sop
0.74902 0.678431 0.670588 0.901961 cmyk
SFDWVN+ArialMT*1 [10 -1.22465e-15 -1.22465e-15 -10 0 0 ]msf151.766 230.006 mo(25 )[5.56152 5.56152 0 ]xshgrestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
false sop
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginSFDWVN+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7EF322B10FC2B166D2172609B896A28AF8161ACE0368AFE548E0A1C2891C9468F6CF8001203B3D0EAEFD5067EEA36A5DE0843B3FA3DD10C10DEDE7ECC4B1F205F8D09B2A1084955D8410715DAE41E60E9BEA3731CCA7698FDFAB2F6C5BD853C3D3957C1C3A42CED93CA60AD0CBA44CB0A07053B47ECAA14A0E56199A33A25603E5DB2CC6A470C6EFBC4EF226D2F67623C83F45C93E2C02C0A9A0974576F8175C7B2D4E9F1C9319763C8100AFBFF1D8FFF8EB10F2B0608AF6A0E137303863C59034E23F8CA0DCA04C3BBA93B80F099> |-systemdict /gcheck known {setglobal} if end {end} ifendSFDWVN+ArialMT /Encoding getdup 51 /three putpop%ADOEndSubsetFont
/SFDWVN+ArialMT*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /.notdef /five /.notdef /seven /.notdef /nine 198{/.notdef}rp]SFDWVN+ArialMT nfSFDWVN+ArialMT*1 [10 -1.22465e-15 -1.22465e-15 -10 0 0 ]msf190.257 230.006 mo(33 )[5.56152 5.56152 0 ]xshgrestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
false sop
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginSFDWVN+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7EF32245FD0373664E2B980D56E9D691EE5A95B5050BFE023151494A4A591D0216BE411323E192BCC75A7A889FA57031D> |-systemdict /gcheck known {setglobal} if end {end} ifendSFDWVN+ArialMT /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/SFDWVN+ArialMT*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /.notdef /seven /.notdef /nine 198{/.notdef}rp]SFDWVN+ArialMT nfSFDWVN+ArialMT*1 [10 -1.22465e-15 -1.22465e-15 -10 0 0 ]msf228.748 230.006 mo(41 )[5.56152 5.56152 0 ]xshgrestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
false sop
0.74902 0.678431 0.670588 0.901961 cmyk
SFDWVN+ArialMT*1 [10 -1.22465e-15 -1.22465e-15 -10 0 0 ]msf267.239 230.006 mo(49 )[5.56152 5.56152 0 ]xshgrestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
false sop
0.74902 0.678431 0.670588 0.901961 cmyk
SFDWVN+ArialMT*1 [10 -1.22465e-15 -1.22465e-15 -10 0 0 ]msf305.73 230.006 mo(57 )[5.56152 5.56152 0 ]xshgrestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
false sop
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginSFDWVN+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7EF3224364F35F160A7435603F347AEE370EA008402323F12980EBCF3CB26E2D43E59A0756C6206EFA3FA7F3CF2F0DCAFEBCCFFA3BC8BFA30490E649BC066EACB91D06D39C41CF4418FDA94B94D65C0F6F28F44C8CF193628C8B12F204AFE672CF6576AC3AB52C05B059D0EB4764306E7B6C88FB8AE766FA7D7475CE80EAE625C3D4B3B8AD5F700C1E5123D83D6C3B46406191458255140B2BB2B7285E8760BEB4CAD56CDB5D69E1D01DE82A2FE0C6D1807BC278045A69D91DDA3546299406BFBCDD14522D29A47E391C26AA1D66EE72A60> |-systemdict /gcheck known {setglobal} if end {end} ifendSFDWVN+ArialMT /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/SFDWVN+ArialMT*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /.notdef /nine 198{/.notdef}rp]SFDWVN+ArialMT nfSFDWVN+ArialMT*1 [10 -1.22465e-15 -1.22465e-15 -10 0 0 ]msf344.221 230.006 mo(65 )[5.56152 5.56152 0 ]xshgrestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
false sop
0.74902 0.678431 0.670588 0.901961 cmyk
SFDWVN+ArialMT*1 [10 -1.22465e-15 -1.22465e-15 -10 0 0 ]msf382.712 230.006 mo(73 )[5.56152 5.56152 0 ]xshgrestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
false sop
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginSFDWVN+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7EF320BBFC2657E9B35A6705AFBBFAA1C93BB40418E3C071A4B65F9256C97D19A81FC1920D97D74BDC10680B006C358F4A055E8EB310D17DB36B82D07BF6EC33DD32B1D55F043C26D6FDD8A81CBAE4C8F71815B896A63B1FDB98A0F7ECF9E837B10C378B26EDC5928C7E8B3799AB2CD264A8AEAC999F603BC4D805ED282A00B545281ED6B9C18B6DFE4AB08C5EA70E73FE4832D8BDE5A7EFB46CDDEE476E8817925C1CEAE85568DE92FBFB771DE6BBC3B6BB104C95219571FA1AFECF133380FB1F1E150D70FC591604EE1D20E2A6F50D40957F263D48A1A19A5D671D3A632D7FED2532ACF68D20DD9EC4B411696AEE5583B5D2BC1304A55977C35> |-systemdict /gcheck known {setglobal} if end {end} ifendSFDWVN+ArialMT /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/SFDWVN+ArialMT*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /eight /nine 198{/.notdef}rp]SFDWVN+ArialMT nfSFDWVN+ArialMT*1 [10 -1.22465e-15 -1.22465e-15 -10 0 0 ]msf421.203 230.006 mo(81 )[5.56152 5.56152 0 ]xshgrestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
false sop
0.74902 0.678431 0.670588 0.901961 cmyk
SFDWVN+ArialMT*1 [10 -1.22465e-15 -1.22465e-15 -10 0 0 ]msf459.694 230.006 mo(89 )[5.56152 5.56152 0 ]xshgrestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
false sop
0.74902 0.678431 0.670588 0.901961 cmyk
SFDWVN+ArialMT*1 [10 -1.22465e-15 -1.22465e-15 -10 0 0 ]msf498.185 230.006 mo(97 )[5.56152 5.56152 0 ]xshgrestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
false sop
0.74902 0.678431 0.670588 0.901961 cmyk
SFDWVN+ArialMT*1 [10 -1.22465e-15 -1.22465e-15 -10 0 0 ]msf533.838 230.006 mo(105 )[5.56152 5.56152 5.56152 0 ]xshgrestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
false sop
0.74902 0.678431 0.670588 0.901961 cmyk
SFDWVN+ArialMT*1 [10 -1.22465e-15 -1.22465e-15 -10 0 0 ]msf572.7 230.006 mo(1)sh577.521 230.006 mo(13 )[5.56152 5.56152 0 ]xshgrestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
false sop
0.74902 0.678431 0.670588 0.901961 cmyk
SFDWVN+ArialMT*1 [10 -1.22465e-15 -1.22465e-15 -10 0 0 ]msf610.82 230.006 mo(121 )[5.56152 5.56152 5.56152 0 ]xshgrestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
287.428 437.599 mo
306.627 437.599 li
307.249 437.599 307.752 437.095 307.752 436.474 cv
307.752 435.852 307.249 435.349 306.627 435.349 cv
287.428 435.349 li
286.806 435.349 286.303 435.852 286.303 436.474 cv
286.303 437.095 286.806 437.599 287.428 437.599 cv
false sop
0.65098 0.337255 0.0352941 0 cmyk
f
grestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
false sop
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginSFDWVN+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/I <1C60D8A8C9B854D0F463D3892D665712D6B7D6A81E> |-/n <1C60D8A8C9B7EF322B3BE19FB964E04D2DB06D4930CA5D8F41D2EF3A285C0BD536CD2C57668EB9E30311BF9A2872DFB44F2BF2A4683B5D66FA01BB1CCDADE9C8A9EE2CB010715D3D6DFF0E843CF77C87A07D1DBD0482675E3CA1DAA2A5203A8015DD09B7CE> |-/p <1C60D8A8C9B7EF322B3B0CFC8FED720BC90E20B208D27DC4B8F11F10B96470F8B4F5FABEC7F7010781F5077B417FE44279776F2304ACD6E0EA12F436330DC4B79C907B9D28468D10FF9256A7D2CA504E4498D719ACD86FCA89B33C61F556CF1168C3F262A781155D5EBF0C47D71C584AB93037B47B18D39FE408A49672C1E63F9E8368D19E113FC95C59A9FA4650E46F6399F2FF256844E27568BA34B9> |-/t <1C60D8A8C9B854D0F45CF665C7276F8075B54A4ECD6470F395A458CA2D065152075036EEECA213894C1EA0DACFBD370590F4B831924E5BDA5281442349CFAD2545E0750C3004A129C25B1EAA8DEF5DA8BF1998E80AE266F591E64CB5127F5C42C88FB43C> |-/u <1C60D8A8C9B7EF32240889FE90FF09F794E92023A18223CCBE3629AB7F517D090BF7D55C0A5A8EADD9BE381137FE8504E8B2DB3D16839889E327241ACA8F992A2BB9AD2BCE57ADB306CE2789439E67A64C32BE8669C197F5851EE38793990906DA8D7F8ACFF6D70790F06B02> |-systemdict /gcheck known {setglobal} if end {end} ifendSFDWVN+ArialMT /Encoding getdup 73 /I putdup 110 /n putdup 112 /p putdup 116 /t putdup 117 /u putpop%ADOEndSubsetFont
/SFDWVN+ArialMT*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /eight /nine 15{/.notdef}rp /I 36{/.notdef}rp /n /.notdef /p 3{/.notdef}rp /t /u 138{/.notdef}rp]SFDWVN+ArialMT nfSFDWVN+ArialMT*1 [10 -1.22465e-15 -1.22465e-15 -10 0 0 ]msf308.527 440.89 mo(Input )[2.77832 5.56152 5.56152 5.56152 2.77832 0 ]xshgrestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
340.353 437.599 mo
359.553 437.599 li
360.174 437.599 360.678 437.095 360.678 436.474 cv
360.678 435.852 360.174 435.349 359.553 435.349 cv
340.353 435.349 li
339.731 435.349 339.228 435.852 339.228 436.474 cv
339.228 437.095 339.731 437.599 340.353 437.599 cv
false sop
0.156863 0.745098 0.623529 0.0235294 cmyk
f
grestore
gsave
0.999 453.996 mo
674.001 453.996 li
674.001 0.999 li
0.999 0.999 li
0.999 453.996 li
clp
false sop
0.74902 0.678431 0.670588 0.901961 cmyk
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2010 Adobe System Incorporated. All rights reserved.systemdict beginSFDWVN+ArialMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/O <1C60D8A8C9B6FF86E621E1FAD9CC02A23AF5AAF7451327A9277DAE8170AAC8E603A02E3EEFF561DDADE9FD6F6F16B77EE709DD797791A73F1C532C58482F9C51E1EAE7EA6E4D820E6AA1026E7BE345B1C97C5D9EBBEF4840C4188F96B5380E7625249BBAD172254404F6F1CB17CABA1F131B17AAAB56C5D3B94E3AC2C2E9F0A0D079C435D0249DF6C47E18FCF00E7FFE3C519BB35DF797EF47286BDCA762289BE1> |-systemdict /gcheck known {setglobal} if end {end} ifendSFDWVN+ArialMT /Encoding getdup 79 /O putpop%ADOEndSubsetFont
/SFDWVN+ArialMT*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /.notdef /zero /one /two /three /four /five /six /seven /eight /nine 15{/.notdef}rp /I 5{/.notdef}rp /O 30{/.notdef}rp /n /.notdef /p 3{/.notdef}rp /t /u 138{/.notdef}rp]SFDWVN+ArialMT nfSFDWVN+ArialMT*1 [10 -1.22465e-15 -1.22465e-15 -10 0 0 ]msf361.453 440.89 mo(Output )[7.77832 5.56152 2.77832 5.56152 5.56152 2.77832 0 ]xshgrestore
gsave
0 455.004 mo
675 455.004 li
675 0 li
0 0 li
0 455.004 li
clp
1 1 mo
1 1.5 li
673.5 1.5 li
673.5 453.5 li
1.49994 453.5 li
1.5 1 li
1 1 li
1 1.5 li
1 1 li
0.5 1 li
0.5 454 li
0.5 454.132 0.553352 454.26 0.646457 454.354 cv
0.739563 454.447 0.868341 454.5 1 454.5 cv
674 454.5 li
674.132 454.5 674.26 454.447 674.354 454.354 cv
674.447 454.26 674.5 454.132 674.5 454 cv
674.5 1 li
674.5 0.868349 674.447 0.739577 674.354 0.646468 cv
674.26 0.55336 674.132 0.5 674 0.5 cv
1 0.5 li
0.868333 0.5 0.739549 0.553344 0.646447 0.646447 cv
0.553344 0.739549 0.5 0.868333 0.5 1 cv
1 1 li
cp
false sop
0.431373 0.352941 0.356863 0.0117647 cmyk
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/SFDWVN+ArialMT*1 uf/SFDWVN+ArialMT uf/ArialMT ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Yutaka Tsutano) ()%%Title: (testcase_plot.eps)%%CreationDate: 12/10/10 8:54 AM%AI9_DataStream%Gb"-6B6u*iY5inK!<3(_OO0C^:Sju`h?f9sKGM^ZpGsDaDnhU]N+\LbPI("1T9Jq!(bC`+/BP1Kfth'10^Z>1rK#Cbmt+n3s"`97%5F#"@K#-9gH$a?.Y7-lK?FrE^*=\J)n[L^F%S#K1^\k"WpE)7V&>\:"CNmCCs7f7C7e<*rV)IO5:tFX)e*%iYEe')4E7jQb>P\cI%^%=t"dr!\@UL%HicR/id';_&D[*rk4:O@$I;8Jk;16='%i3lmM;'Snai0bkZopacOX*ok/dr+RG&9nV6ljJ9VBMTtRVl3c2[A\Ip%GJNq]ofeL4jTPs=B<o(4/E-mXS]d^^]HH>mU-J9hhYu_t-_n\W1[%&W8[XoPhQYb%ZnW&%3L`S:,mccGB:9KVOlR,e+>.8HkUVj[%iDYnB/f!pD^H1c^'G.^BSc3.RrZiLKm5,-hMPJ9^kC4$QPX0rOo4bZs]'=J>_%J$Ta_OD!<kF8O:Z&9s)h8@urtEpYP2W]$qIiY9%M%$sok\\/.'.=-Ga'n"(HShUrj^1c;mJc5*)RhVrc(t=6S;7N9,QW=i`OoR%On')f;-QUl,-Hs7#>0O@=i"5t7]0qL:.Ce8:;;>9%"*B[aXH,CoFYr3=5=[nVlOu;HJ"HTdbsX^d9\OpKCd_Uk,IJLW8/tos$8+OT`Ut/j5aR`,,8*7!#>8asqj#0s;=Nc?U>XpGs6VK<%R/i?UkYIN'1R!C9HlbJpAX4ghn1Df`Q">Kg14e"kn2>PBPCZu,%/e7Y+BKll\MBRVNKopX6_8ZHo&S1?]UdA9Y'_:2_%V2_Y&YD#%Q-8Z/\I=R?)=l9l!3Od,)0ibo"*gq;hB=Htm3V-C2%h=Mal'Jk$c4:PJj.!ujFTS#Se;n4#X0CBoE[XSh[C1Z?0DrL_Ct*bHpUC-%:S_Ob&UZp[i>Y[g:J`FT-E/)-6,2=ko$hE9`l86e:2in28?`5hjA"'DdX'>bdPaub[%**fb<c+M(\A5%Td2CFUt5`=7L[!S(\EcJ%0Yn*A(]"B/n-aP4`ZIB9b97$Q+W'b]5052c.Ns$_og=^t#,((:Ib:$Mp(=An/qQ$:(XdBQH>#<Q(TEacbf5S%@"47CHH.EIH3\AP%?5"aZ%mD-QTl9-:_$PB'4s:I/c51#Uc$5"ONmp=mS'`pb'h3&eE^D4.()UD_0dV&lXWppqob+o'bLq]U^6,ik/lk%_S\.bVjH$[<%E$h8j1?J]uUkBZc,P8$W4*ej_ADF2*(;l>.qh2Nuh5g/QDlY_53*dP9L1PKITLB9Qn@"2`elL@.<\Gng]IA^>re#,5'h.tSV?6[n%IZqNGMYpMiae(5R:6QCbS,?j(jL=t[rc1$i4-sH"kNH9X80I1Vq(%`ODtTUtq1=k=8Q!7E?aWLTX5Du6;#Z85LTuJ-19T[sqaJ4r%s.iUSPpX8'3HtMN2!+:fJ,A!aZ][u3C>"Kpq`p;8fD]];Ro"\8l/+U4^[O.Y!(mV:MR?&7bL2%pad'!Vn#SE+Q\+E,hM0@%q!5[%%CGT'\&d[G>/JW>@.4sdubjHDueQGYBDarp]Q/GBmC9!#s,X'[3H4nWl<J2Yb*i1#P6M+8LQRT"(IRAE6:$\gT790W.F")>QjWW-C%a(;1=H`11;e!5$HQ3KA='@$u^!MkJ9-7u@IqNVtl,lDPK)s+a/S4g]QZsKU.9SJdnl_%KJT(<XX\C\+U8kQo9n4m.2EnHu;#gS>g%i*7hJX4\t:<Nua(3<^f*5N0j:C[8`/,$0F;OW8HYWe`nrGT7#*Mg>/XYm.rK2A(UM(ZQ&!*PIpl.5[4>ct&`GF.``-+--h+cTkKd%%V3:"KPn#9+EW_ns#%I)`g4tC-'_O[WM]BY]L@.a]pgBd;-QXA2:$;0h*q0(VJMB(0$@p$V*djdN#0i"e4od.8l]Sf;)RFp>+AX6%"aGu&(o\gJ;K.@`j3*.B$$h6qn2J0e>%npk/QYPJD/V.10%)LogW4Ui;#HQ@P]g*WnUl#4?^O#"-^)P![9P8?%(H#"PU2WRK^/mR%#feV*60(&W'2aWRV\oiBWI.JqK6pAYJi[p?.Zt^7OVJbQ(F>qsBgr1Y#5o5"GU'__/`rjFRe=1fed4JDWkn^3>I%9"MpNAg,*GVF%s-;aeoUFd4.,m0RL$ncGEtjQ4XE:BH7J]aBT#tn>f.([]`H&[tAGhF9'cCSJPn\p2GrZ<.('o*R>f,aACoeL+OteN>\5pGT=Nm)Y%-cVUn7Zl%2S$u:S[MYi>8n!l)>#&`FW*_(g)F=C&M1GI4n&f2^Qe#,N;-SoN(P0"0Cl0&7($GXV4R%8P_k\Ja<2MIX:aIoS7a>Su%1FbIjX%5K7P4EdM;A*]=,*cj='j1T;WlT]1*\f^*6e`lC[$.98&go1[YkCLb#pW8EW$P7/Xl9l<#,;VjTQDiLqVY'rK?4n*F]rM'%Ui_<2$^)?)=co"<[_[3HR'T>?3BXG]::QQ[!>rj^R[6;#5LD=`PhB*)J$YHA.3O>fFNu/,:$KKeA8U0!Dkm$qs4+^2s83;*4u$>t%8g7gN-<+hfPB#oioMhF]akTY2S4VG?@ia749mkbd3GLE?)oQcJn/e8)Joa<rP\7<;e11BT<siK8Y"2^h"D\:_(Q\`?$-TGi,lFAr%Q9YLC=^3G)9<A52*Xi+XYd0rDobZ[dF-2Vc*of_Vb^qi1^N3mZFSLa%O(\a;4i4NVD4<^"ah]5@8h1Pa5$R[`!IrH7>%<SoYLJ`b%?hugh'qW\o7@03s=J#5c9I-sgFH`4=R3YZdR8H67Q-!j:C4`/a4'D9c>gi0IknUi3nppWc=Mo/^VG\X3AmhW#LpU\)bEij*1ie`"%>,i+=^>NXuH!n5-d[#`+^*+CHR12a0MDgP@RLrb,W8gQt6F6d?3><?%[5(o%mLbBpHV4KgAeF54bNp.rEJlO)2.`p:1KpBQM<GA-%V)lY.ALu4`^@9o\Y-F*9;O>m=KQ#56o2J4&IE^m&WdY7#P-p#o+W6'hb6G<A=c)M;S#g'2B%)Y"R_sQH,=gl5U9S0$i4/tgR79R0%(4kd+^JmeN'mu5<&uA:8IH$l'$Y$4CEsJ,@psh3tka]fi$J/h=\s<*%VT^c:eNlf-f=t:s=8>h'ojE2PU%c4"T.gU%&oEitCkUZL%AATi&<SO:sKW?&oHaqK0D8SS<Da@VP15Wp3Wj,IdW8Voc8c-RKWiVjI]bBW6HCM3TY179'/]d.7XN/tN'U>'J>*i=T;(4.e9>Z)]%3t*-JFZ"pDUTF;OlV:&T^G<I+ob`r6.FM7UgT4!LXDCED;g^Z`[74l0,(E0'P]\14=uG^aHrj:XQDu>g;c=p)(=_2+hc9:aU,f8V%X)Xo2=c4\1<&gGnTeN(4,)$:EVBn^jB)hlkRjPT*C0#nu-&J]_iKMrU'q:(dh(oh=Pd22Pj&]0\Esd,1oLu2Q_'HID-mMdAcruF]%`Dig'X@135(+K2o-r1G5@u@T,j_%%XU%*5**IW&GL:UO`(:J8&b*#3".rSua36s@-Jpp1b[F6l-QeD)pJ",Y4L6c>ESHpR1B(9*K%.Cl[CA[L(^?b>X^ib`i+_fK%9]Zn@LIfGc%=\p.j@NI$3kmfKY?L=[A*c*tP=W1FOaN>!\S??jX.]ar[b,M7?R..\?XNoa`&ps?p%lSmppJ#;X`Y2A%/^S(!%=cE0._.p^grbUYp4Qq@JiL"o%SW3p1_$>N?cPU]MSkOpR#G7M^r_*Q\p:/TOkdLHc9_)]Cpo=ifF3.ml%diK[R3*@4EE3e88[lW>_,?\k?Viu;pGgbibg;t"oc'Q(@hIr!%%:!)BdHlg\e)#G\rHGQ@jrs1PE8aMlGT4E^9=DsCD=5r_nnNpo%h][8+>b6t=ViQc1,mP^aJE._iGm?su!GT]@A=\mb;`1U/3E>XY)BU'g;6klofPW(+#iEboUcn!00?3B+3*IZdVVQ-:OrQALJ:ZZl%'"u\.oNQ6>KV]9(5XhNWP0Li4c`$I*3Cut8NE3[C(k!c')jKV#rP>;[ISU`[acg_R1&geo8]0t<h!=U1C*rZQVqk/BVYXi\9Kr/5%(q&5TW2NJ+%F;`-\2irn&!io?dV8)5e+OV>fc'ddT5=P`lo'1b&Q)W-g$#.HPdfM]"#RNoc1m[#Tl0T/PA^8GUAc@(BQq(Z+nU.E%Cc'ng+rQ=`,rYU"9b)\CqCU3mA@mW30HhYTj$ME0;C;C>VN\r!kH>@,Lk7GekBG(tqkueMZoT3:E(_p`..,$hE,iVQHO"\\OpA!I%3CNNK>!O3TXAqH2CQ."?"7ZndFn.P[NY.-CP!tC!X5%cY:e"H!>a:soO/277jLV7"g*<"\8>[''4P&s7P2hG\\DiFW,+o^1e9Kb?%Ec7.mkV\eRT_D<QA8="V6P,P1*:6CJ:AZ,mdBqMB9IGW,#Q=@?ZIqM3q(A`#FZ@)7E]K`bg'.L2!YQ;a/>fHGjoBe`$iUt-BWa=b%59sB0P(AE.o]84b!6I@s])Qe-D.!8[[XAZq7\m-O(UJ,pTqM??D040d9X<,s7k?@i__DpK)eVEVZ/'q]KHEB4-N\c@rgod_>FkN_%,\hf>qiiI`UHr\L7,6Zc,u-^cU#L.hj@QQRdI@%OHod+O*I,OVk-N1L&A@QlD+-XTXL,U'L0kQlPX#gjrD1'*dIp3^!A\j2ahD$X%l+IP;01k`:l$8_jmKK<T'TE4)7f/4$!6MpEG,GUF*t>*b^&IoE(FlitDf,MgA+Jk;FV-]p_g\%DIeq/*..sh9=.?!3)P(<hZFn?m%\@[7c:YrgI5X[9S"SM"gg6o>8$bC#'\+dsN)GS8Erl`-NX0bY1;OU1@E@U&LGLUVi?g+-S$)V?NU)ES\'h=I;>qIJ6Gmt&SD_A`Y%5a)SIOZQ:4$4Pib9a'UQZ<F^lC9-g`TBt;5=^o\EN-d$3E[dn/H(*R_`?1mIo^#5O[,2+`*euYD>4)@?mLFtV,F&s"'DZPbUS1]8%0MG#H[Le4%ITFiUkRA[baa`j6(q+F*-_E8do>1MGG8pM#aH+f8,!l,LqF0sK/!<Gl;J6ue4tlclEGLu0-P2*ORJ]A!hNp@g,AdYb%n/"obq?'\so!m(_qd[A$7AknD0S9`3';'oE,9i[s)a5%4K7<_a5PELB(J=Ob5NP-#5<K8O(.u8'a8'V8-:%F>mdm2Fi>m@4g@g%p%)q469ah!$qGS'ejXZ1OPlD!<>M^GRG=@U3&in/FI:)c`P7]QNfo^pCRC\?(\\D+Lmj-to%3c4^g91h9JF`&Vh&/E4r_+Ze-L3Z<f%'F9Na3u%;dct$+;0%$J6g/\uD7TP<u8bO*##5maoe[@4/6[mo6*?G_pD+!6m5P0.1l1V6&*6fY%c5TXrOff7JXMrScn\8"U#N^$;%R\*-)*OYbiO5s+)+j;?2pmCs[kloG\C4H0P=(='n8%a""!W?&gorgi/b47mqfHafGnL;RL>;Fe-qCfet&s@):M!5D<hsH^CbcmVB%J$r^&*?8653p7M,Nf3Vl(jEj2Isc-pL4;K_LmFEIeGi;(XkS"cppQsoho+`4^DsR@AGq94)S4OjN[KJ95:aj)Nt)QX#,jd@k91U^%8rg[3(T8qcU8IkgJP4&Ps7mJW`r@_3N4YYCJ%I7,V:5G)H+VH]n)e7%Cp-T'Qf\-XjY%VF@+1tPFBXl(-U"1As4IkgG2;uK&aTD]%]CEp52u`a(h*=l51`0>:j)$J9;u^;'I6p]jE71f?GQ%cp4I0n%KB]>f`WtH"j7>C%NW//ho\,Ku$`Q:I[NiOp4-j+#cJXAe\BL0L%#mD.>7+'=grm#`gkO\K+?j?c%,[c;%'tu9fjo%^:nYcE"!ILl<s1t!B^O#[7Ab"Z+[,)cr-iOWcFG-a$TIKeL3Z4Y#f#9H5KGPu1%7XmO:+KRL$TQ3+Gs1%YbC`5jBjYW=50q,`a)P`V5$-2u=7F]Y_e#]d?7B93W.4Jo$=5o+Fc0D1Y&R29i2HIpKC'N[>e/l(hJ$o6A%mCt%JC9'.)]QLfVaWG*DBTX^H@`6,I%0".6s'sdXB_tR16T0%[LSK$n1[T2B"#eT.I]&%DO--58C%QYDp4tP>i`DK1H9j/r(jQN/%Xd5![HB%I(Y+t%95YpF"DMO+n/>J`dY`ka6%o#?g)_'Q?h")>[PCZ&Tm2<4TqhL.SCB(fmRs#`#Bo8e*1<UPes'<GCiX5/Xn;erl%_)ISIU.OJj)ood%mElJ=P%/.$:XHW#U'5GAq5bgrjnN3Mjoggp>GKs:2tbXkmZhCn1IQYEjl#$FE4Zsc$9fB?k$Z\R[q5lsT0+/g%1glHdDh"F'cen!I$3k"Qs'\3@*7[W01lN37`ch[N/OMbFZleIY5I)cJOfX3iP1Kh0,n6/bBh<?s@3Z\h+1?NPps_klN>*Wk*Q!?C%<ZJc*)-6d#4UOT,p%6*M%S12Q,g>C6Tk&;^'.o7qP0G_e89VJp,&c/0bD,d/59s5l/,;&I9>#Bo]`rGGIYO?6h<^.7bs<E`m0'63%fK,osgi%-YTLI^7.kqkA65hc4UQ"YToKEMTs.M6+8M84WHs$T=1UWqmFrS?;Vo*n3RC@&.dJHZ]N<C[G</-0?B8W)nL^!1Zdqq0r%#7]@^1LY2-#q9`@Cn.o`IL#H*(3l]N+/5a<dsiIlA/fOC?T)'WSFG)HN@g6M1Er'k>D)\E"F*9oc9)sQ*TnHB96LQNaZ>,*,,X&0%a)7tq[=c[qWu^9_>4!FkheJo@H1+NAXmU0#53Q3*mVn\HH"[=u>*_N<:*;h1;e-t]jeUI$cG,-kO^>P*WG%Of_hf3sq5>"eVL-L6%7-QBYERYnd[G38N@2roiC;G.2??<H>?n+jVpW#o"W>Pr)ch>E]iPQ6B(Zs77Seg!MVK@H&=sM0Uq)G(0c(!kTX^.Vmq]/7lQN-?5%^G>*P"g,1s<p4sSM.S;DFY,>o`&GUGOcTl&PoN@nR.iFS1Ru:-k\[r2@J!tmI@r]PEE]>]Y&UeqD6pNao3"aU,h'!Pr*r$c3)?kF%[R)Fc1[0"H<O/U"++p&79cbikm:M:hPE&+,-3?js,_gTadl5i.fiW39gOHWCQD3cK"%nehQ@A]5c%:FJoc$;5ItG/:/b4!P&@`2#%AE/4GEVnF&JM40[Hl<X^UroR9Ob/8)U41X&-p!KfALW6:_kr.!J2<-9\rJSRVJ]Gg]%=&%QjE"l^Ze93i7s<@T<56G<Q7]b4"6,!%\k8fmX2IHDJ(&j699.!p$.$Z=`QcNhA(^gJADJFl2%3I?:bo0\>_>,^lD8L^Z7:4Jm?/"_bt;]Ir:-T+-5<Q'ZO+bYRID->YE"a/%GD7]b>ds13;+#!=2S;A29mOXDc-R`aJJ5n;F\sH[WmR6\[3R,tcWSK%,d0t41RgCei\taZ[?Jh*\nm,%^fGg;q<6Q]p5kCfl):`>%ClFU;*!'7ZfGKf`-tf6jp,oR='NolL/9#526/&aCjbus5B$jbFAdfr>l[>76[BZOC*CD'.1m/@W>)$kRn'2IrOo#o/,%Q>QLs`^A%'jIVnO;#.90khT#Ee!Q_0!Zg[eDS+RO!KJjNU*oA;8"ip^4XcHi_p-%1RKg%l$Ng\\p.*/gWQEDD;].W27f'%bso1Ghi^;]H5)3R%InjO!P#<63"^(kr.8Leb/oP)l8sT-urHibaI'Z[q([e^GW"e&Mc[5rJL0'L&9WAhU_*IAN<X=@+V2gYm]F3b'dXcH6/2`a58#Ql^%n'q'Ql]teuagoWDVK]ceJ#s0c2mUe.Tu-4j]0%!K2>["6p"*F4p#rJZN"'OLl:lQgee_$J(@Mck]:&&,m;b:2]9Ab$N7$DW4^n*X%[&d5Q6J@5W,_T6>JgfE6b4##D5k3q2nuB,q9ms;7*f``8C"rt^mmHu'B`2QOod/*#&qThsp2qLLM[P*gkLX8f?Ficqf0Xl:;R(:f%.Z';I@hEop/&/^eV<cJfn?c5Yf!^koC)/oaQ1%+]S?#<;bIc*aB>#h&<pqMcbLX_cUW79?5Y.b)8BkDE\U*aGhDkstctd*_lSo<u%kc#QTnHBTs@;[">WWuSTJ\[PJ#3QeNZV$i[:G8=V-C&J_VLKdW6*8WQjJmXRgn1$8]"?aG9AUUh\e00(043V-)HV6n\`O9;(!7'a%7X^9!2cCYBQ"H>KYO@P$`g*FhmY+gnF.u]mqP%$&<;Xh?o]>aEUIp6oHZRfGdT%`==#I%cjU2FgqWQ57YI0uQWI4LW6nbDA1S_P4%/'pmaf@G%R.Z^`rT=@ceODe,eA"$8C(d1m%0nR<LURHL$9bLNIj%>*=qkfYTJsg+WI9E[Q>A80NS.fh#.m:%)Q@C[=,GRlObJR4P%XV?bQQB\hS^3FR$Be"KH?12)?)cjOLCSXZT7H79-3%LEh27"8rkL/*3Q/91[[DCt$EM`>nc.0`*k7t/L(Y"XHr@E/0L>^n<GT]:B%[JKZ(dkK$EGeCHu)agG6?)>9nG\QoKa*9I'e5pt+GPjiZ]o.Yf4jBi;M0n8T;thTsY]lDPPlcs0qRX-mboPXuF,#sOFPFF)Po_3"%L,#GqI6gj"6WCQTr0\JrFhDf=59JHkgB#2a0D@MSVNkI-AM.>0V7tl(?QUc7[IB\FY4OE^I+`h&X;b2drOb-KWYEQcW:i:%IMnRs%pu+cRM/S_S.]l0YG&j@`@AW_'b@b'/bV-;NrE?cp/=BK6Qk>o.Y>O=PO0:V%L#?rE="1-Q=8VoCqdPH@6$k]c@92WTn6.uV(fsnQ%&smJ`B7%@c;-uhgj7kC3oM#h]QmS8_<+SsA@qeimc8:7&<%\PTBhYWCeO$9!faRgA=)W:ZV4/_.9N)e``Fu+*q1u3%i;:F?40DO4%h2-J^nSg*[NusIjKPKPRU@:.fAt&9Y5H<9!=+XD_*NI+9Q)6dt>#?c5jHW(-!*9N8:f5l*DWZs$T[Mn;V4$8ik2#GXWcUIuX#(ra%:-NBgKsQH8VdG)$l8R:&:po%ZLPK%9,Bj%^*8p(@C1a!A2<b:?6N>:53aE39Xklm.C1jeN(bs99\o%@g.Qg&9E7?Un,42,9EDe)Z%mBhfubl+DX\0FW`4tGR[[tV`km?AKq-lfZ*11nn=E"oh(OjQ+>=+uk#hRONr7CXaq:J@Dl1#_,<3M8]](jedZQTI\\Za\E#<T#65%%,D0pUM1iDTgge_=1GsOC_F7Ld8EM>]DdV)Rm@R=S!ABK%!jJ[A?'3qZ!$k$E5.ok14t#^:Ug'1'Biq,Gku`IWDFVT*qR8?e[fSj%p5\X*H-)O@?UeKKEf`22@Z302@fB@g13rb6=Y-[=f?Bm(ika<r^'V/,&<FT&N[_tO@I`dO@+?*_IdURGDbTSYU!i]mYSQ*9)H@'F%A4!n3N(N&=+L/Pb7GrLF-V_1'NR[ro0f0VoN,D0.B1>^VZ1(\6A%d*3_9;AiH"nn6S7.8_2%6lFUSYg%Qq4E_c!c]<RT1Ha-.A^D%BXB>qI6k6%>_=>6p9&FC]=Y0"=#Ua?9rO=MM.X;'8fgCJM\ebWibPb+XcZ2'>g:I_)IAGe`Qm#<qnUPTaeN*j%BUdlVg,b)K^8Mi%ZKbakFuJ6pL]a!DBXq&$eHkKgP-hZC)J=u!P9Wh)o9H28"rdkd"9rVKI&3gS>OtIRC9=:GV*aRTFJbK#q.c%$I*t#iQrWut;/&1b%k:1>NXtHc?U<t&!U1:$'=bkqbmH<FhX0ga6TQ_j'=.6^&;(EY]?c@\1hUbedWQh5:[$jBuLI^As;g/bLQ%Co#lUdt%`G5_-8n%,6%197da<_@UdKdW_WZWm#n5pJ*Q0BaW67[7Gc]K;T#e`B,V<f`k$SJN:.>M%t(r*l$Lom#]!`)QMrj<N)>3m;7h>_I*bm:*+S74\&=%LGG_*`d%mVImgfN!ED./7uU`11$.GH?g:SecqpcI^..ur`&VIMgH&U\5k@7-^Y%L6'3)`=%L2G.%-J)'5\nVLW&5;l2qFok`e;k@%2ALT3X&JY32+TqM\"(17ZdGJj%i)AG1p1oUjVkd3%72Z1/%QHW)A)6HSY(aK[0MKhb8LNSQnKaMgQ`n/+G/Aap2j$gfDE'T8g_GF%U"31QjFcHUfPAcG]6KQ9<KpE4S.X3>#ONU>P8j5a1go3*KJE6_[i%K-AKTTbhodjn)GepO>lV%R:Ph[]A.rK6*l%BHN]n3TQmo<l%$B$njG"TjljBfS?c:M1:N/T2YGSc_7(;[Y@G9\;3`l07d"]pjQZ!GQ\+4Pq]?q0eD`J0fgPhoW$*bt)iN^abp;<Ng5R]I)aiDiR:%`jiX=9lsW#diL'pnH[#R2S'gbY53A`0GE2Q>Y,\p#$ot!%h9E?)R7124$^4#5#&+r%Ds,P@iX)rH`"J#IDI#+UfYRArOFDba58gs%G"A<;6p'*_68k,`on-88Y-&Y>9%!ts0NYhQb_u9J/[Qm,8P1uM-*n>Y@:=(apP##SSN%nkR"k(dU`]>YB@,3J(ngRNmi.>LbB+3X%H:K\Y.YUR;U/@,GVPOC\iFMODD*5(ocZ1f+T2l;6$B(09Zq5YWU8IO2UF*X?'+ZDmHZE_oKinjVl3@iU\pB'"IHO)NZIZ#=6+skk%aG98Cj@3c]a1&4<WqpFdNNOpJ42.i.fN;;2>ss$;GlKiIYX@"(>KB*oUsa[?he]Gpg>bStqp$ja2G"oMFo6cQbt%8M`DWsCFuk(;%A(E-#A,^;pKm)M<b,?_i_mh>cX*sB8?(A9l/PJ7"/C6sFqX82a[iSu%9WOWjA+,,u]k8228MkX^Uin??%Puf7d4JV"dd?XN@I4o>%k$o3'o4/WC>tPr0d(?MDZg0lip'"05"k977,u;#`gFYeC"#gU!6Y@0n*I25pi6V`gar8qS4"chIHJD=k$"<!CiHVV8ee_8YT^[k>%;j<"r?aXPd6<E0B.5k)>;*uV(L<SkI2E7sMHi;*kn>#2$\g_C"2)^ol/67LM92d]fA+H=3`2V=c)RN@g^@mX&BN1O(?t.WIT#U_Z%\IN*p50Ol)CX5cC?qp4F=B\Or-Hcc)!(:<FqjqF%i+pY0!*HDu:&?l+Y.9\I@FP#Ud=I^g?p_7JRf%?-1@YOe8Em2;"]9[d1*hVN%JqaXTP;P@(o@+k3>To#OFr;LI-&YtM$T#<1\T/Hg=r'ol->==0\$%PHZ!*Wu\o"QBnk*>)akf@iat+gXK\"ne=Qd4KaT<cH`)'iS%+gEuJU99>g7U77O?ZKa*l0Z[Kf9]"qbo=<<<*m]H#`IDbp/*En"'p]7SqWXDl/u#m]?fgp[OpoC[1[lt]+:P\D.i1`MZV.\?AfhF%HOV>0\2A;k8!-9/7]P,*7&NZ#gK-ZG`^D"d#k+63e&-flD.]_(YZktt*iGIrJUSNe;M6^e@Nld5BIC[mpgs>;1[I@V=jd'75X5'a%]0)+Ud7>PoB]hN+*R]7#;VF\o.KBs#Z^k]WEJ57c6t[nJfL1Mh`2PY1KH70ICHE&pkd!TT>!mEcYAmk_kc'Nh6K[EJ(JEE8$Y"Zo%E.=U2g9[C<HnMiMTeLh?X-'g??tFlrS!3Y->!u%/3g.UNZjNQD%QUA1OCK'f6l+l(>Y<K^oVA"EFX]MPji$!.rjD>=2t,eD&doDN%22d7-WkPH)bM,[4O(#jF##ph1]"o$!L^b@u2pa189cp])4qf4D&1AFa6s6I\)Mt=f1?H,*ZuelpFV5.[(%dBR.uD9*bEWkVm<W.c%dBorU`tAgrk!l*@K'#]T.*MdM2ZB"*i-j76[uj(=G^n<A_.@E'q?<5G7#'@'`_^oigO$p$,YaWuaj37pPL0rF$Ri@6b`G7FN+Dk;%Ti.jZ8"krLMK]<,Gp7R4/sPL/+RD$pb6Y=2ZI-\Z27)%Q#=93W094!;[C'%R/S'!NY>El'h@J778%4f8m_(YlB,EM.;j32;0VL3L%a1Z5+=Gh!/AF=L)(XtVrjk0CL=fLI#hT(=qAuf6*dr%=Kc@nrP23n`%4ONV9N93I9.m@'F\[Q0"(.Ekmk0rdYMXgoeT+0\sV6h&F%=C^U:P?A<Zj$\1#DiFuC7(AaI%!A!e:0*D=IPs#%YdgMmg$NS]bQ$5=>Z_7X<./Sffap%%@:JUbjdUCg1$sH6,ao4"#*gZ*Rd[ta%`I^%WC/Pc8[_:aG_VHjiCYgu=[C3kQB$U)-$mh[R]QV"e2%e'A3n(LnEok*-:=ga=']F*q0hJ4r]=;a@2WHf+Dbi9^R-q$kBhgeB%2!]S>Z;4CdZj)d*R&ca=^%/Uc_JH(bIX\QY]n+&_-"6t8h(>b?;)+d\,H5[s27LDb_G$?qD/A<]b>SPQRpapJ7oL/FZ*,WqKbKWW%(IN5?@mJ=O3Vfb#Y8]-[jjpeBbHL7pf.OO-X4@l)^7[D>FOh%G^7[D>FOh%Gpe2D5@d'm<kd8`ho>f3\8'iE.nK`k73eD5r>&_b(%3pR&434m(d(cpsg\s[6J3Fh9S,NtBE[fp:*X<Zr=Q2![#FHi:i,3[6&,jo.*X<ZqRHa9J8Z:3E8]rR(:#MqQUkf7cci1N[,l4l2!%c>i_pi$^]aCLR>u([W-oYpKFDU0ZNB(^D$`H;E-tq3%3X*Ej\'N(ij'8Jbs5E@pad3M'Gq=Tj@;o#I5r-A1t!.a3o4*VYW7c#LD"%pS;la56n"KEu)BfgWXZl,X1eHc>mKI-_$2X]T6kF2!9g*T<"il+Bm*"RfKH%dfm4?.u8Yn='`a\XQu=dU:'VkZg$3(Z;\BHW@&qo%]?NBh\24U\W#Mtt@[:=+G&q-^o%=8[RHsb\2]SEiYVTbV$o5.#Z!)l)*1Oo[@D?gZ_R(pt>AqqTVaOXVMVZA72ed$I]dAZo);cLb%W##[kPR^#RCT@/.AFfY6Ha#e.en,O>:DF8T+_\GAXdPspLoK[hM)fd]>'5akbr,o&+3-=F;^WR*nNBZbI,H$cJJm]Y>%C(/54I]o%C7>FD3"@Mc(APJ+&,aP[6&;E6pt>P[4-/D0\f*g!3'Nl:F)GI&P^I<]@,ljEXpoU!q)o*EL"XE!\AO^0m_p._1\^Wfh+;lHN+ia9%jFBg]C]2;VWNONNi9b[??2L;NLf$8OB=G7-QSU(B0>L!6E063K]1#rlrn)A$fFuc`9kV"`Z>Ie@9QrBFJ-uuD5.SY@LompiF#8b0%cDmK&3)n3!#gM^p=KHdA6elM2<J(_?W&2Qg"Z$5-WKPnPg^G3(RL=3cjg7AZ[W.igJ#G-N8&[ZO5:/"KRAQ4-VG:3)$_-WFbD7=D%e1m#?Z;WItlXO:KmQ',l+%(9Vo`e2Qj,SZqO]+AFR<N`u?tHm#E%cDN)7([K);4.',<]>$2p%#H9kH*f4Lqc=R!PY\@<(nt8SaIA%`!;rMcgH=F,VL](]mZG?Af`T_H)2'UEFk9K1hO76f_<T6e(aW4K*ZTO's_07qAb3_/S^Ead=V8EKmi_=$r&XV*'PRs2El%sMi;D%%L\NtJiAh[i3=%RTi#FOFG2ss3S5kl1#?k]lcu7]rZ@(TeMqpY8'[CO-]U^Z3jR'#7R^jHYPu6_[J`j,\5o<dMiUAQa^K@!Gjuffl%lJ+'N>0o11DLiWq]&J@P3[ZO-[W-H0+XHnT@=&4k#d,sJUro'O27fX0<=d3m2>p9"9!]ZFUP[90rGm8DFZc1^S_r1H3/?[X/Jo#=%X:![;\G9g^4<DeEL[(E"E&2rk3$QZ6GdrI%"W_q-Z4fMuK=F%#LK!2p2%ag8kBI[OL[?cO&TM-t_\o$Yi-@GTcS-QgPB](c>0Lee%Vg^d233jU&\"m<BQt)aZ<1(5cd--c*Hm2ErjuYUV][J+E$R^^Y=N2gr3VJ-505'EL$hl`q\/anqH/@+;S:qd@R'3!%54H!%cdl_/%>DEkgN9T$"qR@9fZXNO3ClL^O]iFIB!Y**-D"t_&F(WS=M:9aUPLk7'EK3MKRCX`K=f`F1:3lW!B'6<+AqY?pc"Xu'*9V-O\pD?W%/C'"%7Vc`4BAMKdS4&-RMS6QR\Xkfj`pU2_F/q-(M`q'`pb5%'_33OFJf5hpcGtjdYo>>@;K'4,8A4O;,5(KHPDE1X.IKbq.OrJk%Lf>eAMhk=\a,>aQLgP4H%(($HR`;3-$t=3iWbWt,,T]o3<,6asH,GA+Tl?MAEuV7A+r!f&?qp!?SqOuN)"T<*FX@gJV;5%-0um-Z%G3_b=6K'W5R*W,\Ku-]fJqHVC77,rmqj91K4#DFj.#'&r_OJlmGBsK#f5YrG4uRJhnD"8K!QKQs[t"#c70a$--u@mN,'Tj#h!#=e%So\rR7M7g_*Gj\:S^%V;4D?P3+c9+'$`iNCMlY<tp$L+s<O%S4ks8>&9DE<6KDPAtcU6kG=h#FK,(T<^6b"WD,nN(=(B^qbq+VuT%rHo35]teMP+ECW/_"0#9/-k/>052STqjjS4dH9AVD_eXYBnP5.(>$Nr-3`3g]R8MfG\q$-?_48,Fpl!cS:@"2]7h?/,4(V1cZ.E+%n[7'tQ"H=>@8Zk,]4]:m]6YT:?7B-ZX]2<]`R72Gl0mYZZ3UImgH"FHeHNS$<RW:[iqrLoDB_HS&?n6s@(-Z_Zr3UkZtgCb(]7$7%^R8*UYc+o]'ML$2qtNAKQVI=F=UmPHB<Fp;#m2o_T'i^q/b!FQJRRTK!VhMji_<Xgd5T?pZJ;n6#:CJN\kb3d%S@^8?bUfT$M8U5%&S6oZhMm6YFNVWK>:llA?#Fd'm-/7\h'&Nares9gma.Q!OkFGlc[mrZRbqV_@sq=_^.DqnK;YcYGI0=;($#54bT'OC\Ok)F8Nt0a%?Mg5QS6FlHf9X(cPAZhupZlm?M4D6oDZ3;i*;!%;pW`-3&Z>R`F:Qq!-Ta`-m6)]j-5g#&*8DY!]LdmX8'@AJNSRn'\:Dl?d^rmD%ST?m:,11L9eXaY,Be\[@1n@LqHqoV]$_*Y@^N^Yk[rCE'UM)\5><FhhHPB1ejLM,@`k@8,F*L$mK$e[XB&rc_l1Dk"Z#iaBf']9s%N9i+"HM'1bc7#"(_RF1'BK@BWd)`\/Z"Q0^1Q/*94BGsoBK@C"#&3*=8(/>5M4\.fM5E(dV:0-N*^nHp.As2Bf;iRGU[_hQ9R.FK%B,!utpC=B@1n@K@%cT!E7ap$ubbJi4UKG*]0P2.rk8[ui7+3#jUZcVK?9F[:07]IJ<R3;$U?RVGl,\hMAMfs7&%os1FN1@_YG:?@%0EO&9\']<;o8D5JF@O>:PjEBHSImV.:,paHaDj&-O\2XeNt3fC(L-qU`qfi]\R3RU5W[-k:lfgmMng^<Z+%'j*0#.#aaJ<-8XA(a%#PZadd3mZ`28tdHc*lbZi]SID?9$[Gg_gEchF#IT4ZdABoi6.39es=dcK#UAf1eljCZ>opA:+3T:;U*i.Plk$<7XE9_T48'n"b+q%['*gKc2&MBZ-;0BmM>MNEcfPH4&a+%-"$;5472EU-5YLKlC-*XG6[eCg',oME-etO7<e/]UpK<ShD/RYVW@H>4(F2Cm\2dA`&PHm%c3YdYnNsUsk0?*_c-bYcRMV81o\&AsWrimm/;=BN\L=/SGnA/?i5c^EQ9M]Rc\8]U/)N^XGfQK6UNpHWkq%qAV=1V8>R<-,k"ZoA%n*RHB8os,_#2%$YU1B$<CkZI;aq0EmCne8j(B`.aidkB;[nPIWLRi`Y@@c:+D^ZV(^G(WjI*]i\](eU7,D>U1]]E87e>fA?Ji;`#%^>%2:'K?hH;%=kRZ&3'n,))StRmCJ#")AXdEML>'YBFS+YkG,7Z^53;>FRVf&.3KS$TSOjqJ&Om^'aRTQROC;qUVT%]^OD!L\c=?%9,H#-4fE!pihiCXHI%`L,#bYW]>=!Zb8UknS-C`NoD\DjcAS]J65tDEIDLWf$!`L5+G6HFC/W@:VZ`*%(;6i=>Y8XJ[?e*jEYcg5%0o2;a#5]EIUjL@l+\HehaC&n:-[4?k&D2](d*a/U3?-]-E9HNClFCiCRu)MtS.,pF\=<Am4BM&@<]B,c&^M?DT5li.3=]r:F(?4s%pkHE6qd-[Sgp'sDQ];gsd8(elKXbP-1ZC0o<a9YZ$`g3d0J95R[GoWO\"j,7gFJj`52%'Dj5?FX>g?g0/944uN@0:b2l;U1qR)]=%3Hjr[7R9^QA;]fd4EEm%q]I5ua/=-aJRGH-lNtdD&C\hD1;;0^N6)Kn\(3i=S3Msr0IBc`S*B$Bk0%r.EC#;,3cGmW'Z@Aeq<`tg%*F-I(CV=n8[B=lpbo+HqZ&c`gM:Q*//eg\&,\?XcA6!Rjj8([?j,2;"`R+8,->,'9V;'SNCg]8#5gR'HRutmN3W/5;os)!2B@f;@%U(m4(V+&d'N9f6N_9l3lFdR3dM0[P.9mO3$cHf6@iQjT\.F0R1ffmCj29@"1E7Rm=ks=FgXn5KJYWb)PLZ?cQR]OjI^&@jL`:dKR%a%dc29^MY.&D1((d<u>s0Ya=jhQ!`(oLT^b2B%Li&^R)<d'V;c<64[>$gg)nX/>E+UZlR24:!UO+ak3a39L[4He?P\f1XrU>?u=E%-(7jaeD?6>1c2)ALJ?QRBpr&UZFYgnFMUtWKVfoOi@)b.cScROVaKt)cUq!tW@f5EC`\7bd(:`@,elMO0/&^3rahBsc?n!G=V.05%\=jP#<Z@rqqF[M&A$=L]Q*.M^fh\ps]S-"82glP"iL4JWU[cl8^pMP*c;XX=1T'P%?16fdFWeQ_qc6LZdkK\N[+De3QWa"cJ"E^M%-al%aT9Sd-1^P<\O%#VfaXf3@So3hH^=9#)F+L-gS4o8F>&Det2[F:UF6,AqEM:tJ>0Y"(A7?^e\/!?<[E>jJqYgAM9@kZbBWE&\%X0g6u//>3Y:j@&aceaiW:iYc(ANFpD/QQlU>%J;2(,8utbnZLUj.SJ+9r;P85[c!g>-@`=GNV,&(#iieV<&)rBp:,d2QfW_PE);5%[XMBiS&F!.Ao>kdm@!X,eVYl0__@^`VD`%1GG\@&4H<ICoA@M6ef(XMBVaqRF[.Hck$A$h4k\r-M`YpXZ+W+,G'Ff6G-g)3[QW4\%7fb5Wd):8H'h?</g*+IU]U7NTV)iZuS?kS33,,@7)A-WVG2B#:4$%R4@2_#,f#Ve#P"rm<^$?+c5pqFnl23-XX==KY]#4#CRHso`%3igDIDQ(<N7W2[VX,h48jLUW=jt`#lVmdQ"RGp1?d,pi#=#!`oDU(6rDA%p-GM`7f!sdPiVFdD7Y51O.EuPIbQ1t!GS>M`QX)<9\%Z/b?nl1aog.a5_7C!I*m]gZS2.'n//.*QS2iW`o$Yrp;>1YoU3#@k4:l+"Qs76oR#\?MrU(o(-t7A9dQ`W0266Xgu<BW"IlH)J94%!d#=_a<^eup1.ejJ?U[bIh\R)(dM`CR$lpOBagZ?o56D+[S_QM@fRN<fpJMOBagZ6jED:AkVNLjh&=s_pWY`'nDq`)1<A<Yb%H,I%RobsI\VT7PM']MA)8rQ5d-5949DONaAFodu4u54]mA51ogAh[90'+<]hqg"nb%Gj$Q?S\dRGM;]d%u-D-FG4)X+J>9KXAcP1mm.c%a1$$]<kgZ@L75[)D]W7Fp\4NP/J.V=4<(<0n%m[R%ds"2i2>YP]mePAqDgbZb5,F/a(IakFK_;t6Iod:/U"=i[EBcDil/T[edB$_%#LOOcqAD\AEI*PJ:!)W$?bP(;g7QLMdCk"[>m$%2ENbun2h9Q:lY##s2N'/5YFcGHB,E8e2SRW4jWE98D`/q^Y4*[ri1n<8)W'HG%i*JVMru:B,^VuqqS=50!:S;`OYFkJc=7q/Ols;m[gU:G8MqmX]0'7T=Hi4@FM:tNop\4MeQX[ZAGB^6_jb=,!8G1nI5Gi06hs*_u%akfFBRG[;-S3sU?]meO:Og'0)ia+ibLMOblMr3i5j`#W2J3?(Lme*pSZd3pP6egm45O4:]K36O3me,$jd;*[n>N@t3kEc<UhoE4q%.3A+^5B#uMZW#kS6ut>uf?\c$R.n$pjBb'G\-M\-5><^;h!:kH_jOa-k)E!>$&mFi+hf\OK7!R`:8%1??9da#Q<i=e2tpV6])27<%B1'R@rT:bRcfJ?anFVIgHi72T`A`.ET=O(+jbZ$a\,'5s5.\8Uc]b<7"k=TQ`YQ/;ch^\W\P?us\CYX?>G(e>rCfl#egrKBj0Mg=%*8SZEE%jC7+XCq;L[-STanSn$2eT$mh<W*M<Z0PtX=WjYme&A:"8H$CMgPE(;2Ig#K7!PrN#=5%%F0ZK'([r$YFeJ"V&!R$n+F"k%=*eqkTB/3$dX0@=?9`5EOI'I8h!8UT(s_Opc?HIa)(Nb1I\o1O0(8J>^=A:gQ&FPcBC-4G&mai"?9`Li6)9&0?BVXArN%qso[1)<%hWnf;3Qsm2c?ZUcalLeqqi&*ig(TB]%luA2+(@i9]C/gTUs?1PF6-E<Jt9"amr`&sRdGp)C;Zce,oW<&ZHDkZP?5-;,6<Q+-m;EH%V1+ilP8V=&CG5)GBXDp=fh"psp3jcOR(Knjf!^ko3"s5/m7&a))l#[f0tJ8'6Vq1XH1s+Vf_d3gf=-5"d>dhj]BEhhHQZ:g?V-sf%'e]j#K<pG3)fuRDqH6!7*:=i^#`$+f&)j>=r^7U830NmMj^.+R\/Kk2$eN7k.pP;W:5,24F\'$'?%n!1\"sbsq>'_iGWD*<_Q/'r%-G1CRc:4R+2)uR>%b=-KZ%"p*^>qW@[Ho@k"QpGSls,Hm>.\Go^3cB"hmn3Irs2"nK=@a/\b0hhG^<6E?iBm4/hQ1Ka._U41Urdo%YF`CTh,ZEX//0clN=Ah,YBWT/fNYV(Go7;sg+AP43`%,Y`mRN#"ilsi`t2'n(l4OH;VW"KoH(h8aTPb#'LKh37sNj7%Za*"nL3h)%050.m<;8A_+g:8=[F.?4W4b.aL&/o2DnQ"<H%X2g!3L2*V]+C8*BshOg.MET'$l6rFnPuGng>\Yg+htu%$?NM]3<_r>,\@Q>Igo9%ZO`+Pa_Ds2EL[BSPAAb]EEhr:""TXA1(Xi^lp0ib+F:J<%"Yn.!8%e"MfL<Z41a5W7"1G!:E)MY9%10saDNF6EcX[.Pf<<9Vi_[e%="cZ$LOg$YS6AoRb$fb0(lGSZO"L!GrI^I06LoIPJ_ubpo"Bl&KG$lS'80hN5(0g`k`+CP\ZYOPm3`6*U\&1B'Si<#r"F>T0L^mb%;IEC>IfJJ_A9q$"p'-<4ik`ma'9WE\4Dj:_2QQuT*c,[_3C%)N]ZC0839!O6,aIf$[M`a3W</1Lohf7M'2\cmUB(aGKk,TfU8IH<%f?5lW5dau2=*K'GJaa\<TW.94MTT'392FTO.0?#tpntcQ'gOuZGLWp*Y_n7bC,*dB5rs2$KOkGq_AnS136WOsFFo8@oHXa/jVXS6%dEa=JCkN3lo(54C*aO0:kj;#rroK,NJ4<B>M4TgA4,b\T^9UpKF4%,64i1;Ig"9CYI.Z$nC)b^Q(FLtp8?Ld@nI&F,H=aGO@@i<L%>,"l>e2Ha%6mboRM;eEg=[#ojmB!]K.sijo2'qP<Xbc3XqCG&cZ/F+JXG(ilp7u[%AXS_5>pH1f]tooagIWA]'LPF9p<h3e,UN>s%>=!Wug^BmT#Ee5_agYns/&*I*Z$L3$8Or9OSb^G+</7E.B7#=_*O7itp'0N)oXk\VgP#<25Jn.E[b'E*Rp:ZML$0uf$"hnNPBI*#%+.?Xl,.R@mL:7QRQG]8bB`T"nDr4M5[?pC#!AJj%QoIL:f5-M__6J8E6<RPu8kPBD6PT(\ArM]RE'.#2:g,j[9$&YhM5-+ceW/+d%Up3JoaTG!T@+erM%E,6F&?,#QbsJ**j5'k*7S'UE[iWo[6^,LA@2.eJ!KfHQloEg4'(6q\h9''mQ=%Cb/N@7R>O!j6CLV[&muq<C%%cbAK\j645.7*i4hhf56*q:`gS`7Jb*E3h9gu&mE=c;"*]R"s16Z6e_W"%c-9Lq,I)p@=@hCP^8SAZVncJ-mX\/VUt`9,q!NYL=^%lGbk5k@",9OM\WIXm!2=V<)/3O<D!G/)%;R]*gYn>0Fsp3(9cN^.]h;hkSrsC1jASUjdCaX09S<-U;?bna0tkU;U2NhPHn2.BN,V%QO)55[jotJP;8RcSs.9kbKpaKQP]A1qR6t",O6.DUVlrfn?F7O^Bc]*s6Xd[!<UXe=c5To#i%Ih7k/f[[YX]r5Df[S;<;cCZp*$o%1G`R%lDn9pM=p&p9gn".KNq\DX.i?Yo^s*Xr\J28c'Z.)H9+>k;Mn("]<+eI2^i4Aeip_*j#A6Q>K=$M?EKNRfi!r=,)d:3XU:34%g'n:\rEUh-p$uMtl4]gS,V>jmI%3.NMcd>M[$l<n6DEDKJo?mV`h:>=I8uc8Ls;C@bc]'jl@X/\$@;sKnQ\HSD21uP>6h)-/^_I.%q0R@+JlLE@'SZ9XA']:o)fi/C7,fVWalt:O1hPHC\WhHp(&#DGFr..-(N`/4W09;@V3e/+c(u6hlQ=GQ\Th',[h\tr<rk$H<SjYc%4LsO9pN5tI+DqMk@Piu'6":;q^3bMr(_,*oRYg%d'hu^*HY)GU&h<*W$gY>)+n_O^jPicmH1Vg,6rV-F+1-$l1>Bq$Vb>P#:dKE0%Hu6G,X_UgZqeM+[fOiuADgL\Iq^S<0h:\#Bk5dm9X#E0f54D$i%3\kRbG.r5W%?.QWkYC4<8%f(2(90J3Hdj0C_iM,Lu4X6R[19[%H1b`">7[h7*0LJ]=@u2ZO%*F-YO<c[")I7Ii<^+61m'4Z0+W(-NJh"e3_OX*Ke6a5jABl".2i'iLk#'VGN6J%4Wuq9'ZIPBBZd\[%DWb<mCBVS*74sVG:?JSK@0^eg8Q:tm<.hS*@RS!*LLTkfHK;Y816K25r2>T,Ub$.']7anT%M&r'Bl;M(lN8&p:Nb;q)/l:lGf@6X%h@m1OirHu!=795qp8Yo#of:9uH/g^*l"%`@(.W)L.ET6VbT1AuE&]^/$&t2o:1oGT7I#`ZDQtRrK)Ni*ZoNs3EWt2c2r`n;*c(nC%6MW^25?ED<"bWY:$7hj]3`AEqaV>uMDX4$3P,23<c+=NnbU,DU=&j(N!\ZFLA(Z1J;QkRPg>+113U'&qQ&Uc)]J>_\YE'4D-+[P&%I,sXD)sb1YB)2nm!aqFfV&!A*?6+*s,:5>4&3^V!3DqB5Et`8De]2>4!Q5+Y-jG>lgCIR)/S$j2#ft[4Y`FnKaeYmAeLo6ARjU_1%E*o%oPDpSJK/%Ng(aQ0#,WdL34YUYfqD7cPErLlN03-&pd<aT1ZSVq#Sp;SP+(konmP,@(f'k*'-U/.Vm)UX`I)/?m,Oij;O@lND%JG+A3=$P`i3!BVC.+g/"pDF;^5nsQ6IYfRGp`u-)8(<qM@5cI>e,D1sU*,O95HJ<.pjstA(t&Gq3=6FC.=@d2@J;4UoQA,LOGKCS%J`6c-n5p5r8BJ.CI#!Jo!E^\<'f#[t0@YaN[@[^W!%dV\E<MYmU/'Hn:MVd8U(E26er=\oY-KpU`E[TH0U6V-#%)>H#eYGk!)^Eo%mg-K+#f[i#+i`(s6UojJc.fnl(Locrm(Nb>JG^[uR"RadC+sDT#()6#Fr7G3`YRm[Po)G#:4-di'[bPm<f<%]\mg[Qi]6=bW-#o`%CU&rFj<@$KZ!ge>7O@2FX%=tYZ7"WU`_6!\&h>04*-iCC5?tpKkpK0r_7?R<^0p69nuACgqVb>*i>0ae'XqUFFO7)bF2Dm<?-l^P%,8HgaZ])oh_nnb#Mc@rlUa_EU1hPF#h0;XI1gGkG<6K1A:gAfVhO]@S*3U-.C!<l=TstrO2HR3S`F`Yc);e-?Tb?lW59oJS^6pFr%`NFGY3\?)^d[`oK>PV32GbocYqH/!Ufba`gSY>DtC=LW#JZV21Q632Fj38fdc^WE.[,4cLW9G'Q1^\.oC:58<p0R9jr(oE+$X?5<%S"%$bdFRGaANP3X=Xif'54MZ5fOkX2/>%Pu5MqV<5!.O&*Go*=^7:G9PLGe?rTQN?;7r:!FK5);;ZW/..7UAi\%?m#<-jusn)1;o%cn4G<3og\mW^diZ&k_bDJP/mMZiRYQ1>OYFh4K_\cJC6GLDF\^)"U(=,pu6]96[TB(r^`46\dBH`=U0*CY1hZ]P:p]B-%EMflF6:%Y_RMA=8FtVULC_SWrQ*,!C[KUTZDiK?u'UdN.haOG]Q]_MmY/$jZuENIgKR_>!@j8iSMR<_S^g>2)?+:PO5S@>qL2aG,B4g%ask;%'IVN\;E??WGet\"cAH,ggS5Ue%*MOn[jH]LYU#QUSTV=t@.h*B?>+7K3/DQBUH%A#p$+`UR5Je'[!`>nV5Hn(;l]I626"1749H7#%7Z;e7DCQqrlF6LsU!7`=r?u\QXFA-EN)nqYER`f6@o1uUG*]H\0FYi%[Mr+8ne'8O184=_$!ML=ah4=KObY`1;@GflI&b$!J>[UT%]/tAuAFnbIPa;3+J9uQ,BM:&k]Trf:TTMY3=rnfF)+Xl@jT-Qt_EOYJ]gQfl%r`MMXZTE+5;*TK@r!.."#TiY'#A@/!&Ah#,&m*\%4&h3MOTuL9Q"r^5dZE#1O?ISP,.qHk4!^c^,*"XVrX4q:SJH(mA1(Y2b,*Xr/U@#sF!QHDR@:d:<S.lK=6CN3F,t.QQE_1I(GqC-%o'1s+Puf2mWe"Ec'O%4%46i7hra*K574;gm1/)=*C,]aM?Rlm#h(!R%1"[$MCl@7;Yb+Vo<[ud40S=$k?.Rd+H,F'eUCs<@luiu8%%OmC03,qIirtF=a"S"!VJ$m,&Fd^V'R$_,"Da^e[7uDB8J@'<5GdWD^V>si``4Z8:l>?b$Qj\Zol>AFqI5CV[RhuC/lu'[<k_A_%%Wnd'"\@ZGH/'X874Nm"b%3R"CN=20\<$mT4rJsp]82T2tQ\fD8(/%C,_ffaQGr4d-\O,V2q[P@Fq2_,0`4`R$YX:j(.6m.?TqJN`%Z9$aD<:tjk]tCCH\m@G45/PT43^A/gD@/[770+72,4%6P_naKJ1;1Z3:DJdX52P!ZF(GJ`[BQU>]8<I[V6BNjpTh!6jt]Y5-caYT%S`g+C%O-9qJM&<SY[s'JbfpqkG-=Ot!/;OR6K*ApfWQCJ;([%ib<RVG.iY\4eI$<UE$uF)VIV4n]FtW,?SJ^1gB[qJb/GYW7lUEa%E_d,+#Xu]4hFHp95?fF["PITbhi4#,!l?P\6\?2mgH4`-;u,0LWLI,;J^dhWc&>+7p<pM\`#@kCf*5]o#KkK_f_AQf/CTgpa'T-&%;.Zmg$g$BulM>;l1OCf,?5EDs7!t4?,0q,);Rh#,@A;[8`J]?8C_Hp?MXMle-,Ne&QD$6/f&7RDK"O6\K)uS4FCnJF6P-/mQjPAR%`(9^_*ictV<=Jk;0ID)Z"6QckqlCbZSDJ7$3mH/W,shn%`-ijh+lIckpR'%'M]lnQ,dc[')(Q;Rg-nFs1g>c6I[:6)Fd([AE?&mP%T*om&?GiqWZL@?dpL"geN/94jiB]2Q7lpOT[_&BSSh-k)/@Y`rV&/c&07VQ],BY!l!CujVW_W!e?oA_O!Aokt)?2EZD.5eW]m3+W%k4nTfFlU+;p9B5%>j6*FlQ@@8\@7PMSYoa)>?/18/r-81P5Iqq?nUh$?gC[Y(SfWB;sB$HTg/XIZdUd4KpT,Z?M[jbkC&@!.2Ah#%Muujk'kLQX%d_,t<=4rGl4m.7Ya9I%Z-))D$Ou7XI$-2AeGdb)E4pk&'!HB)h7(sMjh>m[dO]#t4VEm'53)6"KDCb9P=pJ!246Xk%ft'cr(UHo>&7&u)?NcbrnUmXK?DA7mp@YZ.Q48U(DEU:snTLKH98VqD,tsmK9@n/%bJMO$,Q`tI.AYFn>C(NAnZIch^rqfW8(7eb%>&aAcYj4mCXM(o.7C6Z9boSgP2jIS5Hs-")->ta:K2uqR.jJYZ#@Qn=!qnF+.NkdEm2A1E!E%'NS8uaH/RcT#=Is;pqKLXcc`q0B%I'1>DcaH;-3fe3Xap?$TgYu0DGB^&7`q&&5-`%.Mk!*H/!1o3Zhmt#8<m\MJ:&s&l]s@VT3C77R:EeTH.MfcC!+sM#cj>55oAMSc%V_(3B,S1mk*F",18`3Cjr]T![BRRX(9>IR0@S,MTinTjhSWC:d/`KbC[3`V*B[L1l/K1_bJ&/RlfIaM>KWW@>e<MTdX5lToZ55C(%/V4tKdL4:+Jd]q;2IIV,EZc(3+,85P/uqNMC"270K"16B:a!DhXqt1HKgsLiC4OW^[SmYO<Xia/S$d:@Y\N)(3`$;%<Xi%.Z-AE1%Eo9bOLmb7I^7_TKO<#pS)A$gk)s(I9e\L?93DaZ-Ff--C<.n51gg"7DO,CU>\c'76bCX\<_'L"f'sVXjBgIQnC\$cSh.XF;Z!#J/%pRPM"<hnbI@.gRe1GUK+qS<,c=cl;Th_con$0*e$dCi\FXce.XXN9d3P[0anPHN,e#4qgIQkcU.kEjGN5-5lHRT/G@\:IfQEN[!0%f7!/U3IK]"qS+PeU)]\`\#"%_jiE!L5SD(W\%r0?OP1`NK"l+q`25q3;u/pm,+W(ifpIRiM9m%t`^K3>(ClC\r+WsHg[)Sm`,0LD%C`7@#HfDeT9P!I;mu<1B]NS3%#3q,C0bHPPb&Srafe?M_<,d[("9:hTg`0D7qTB46!ki1$m42-<6:G]SllK7:!:]B\h/6J"!5NIR%&cr$AS++&%$*FG^d;HhHFD_*Z%eD^^n8eP/!T&=>4T+:m"lL1D#C]GUpk&@MO_7RBMsr%?:O:=hLrq4e/c(k`GWeZBm_8CGm'?oA%#:6Vm+')?dJGM$nqgg8C0WXdY*B^^gV*_uqPRLLm&*3i*dD/:!n5(/KN1$XJ*m+TS+tuk#2"Db/RX[7>*1FEjH\P3gg^dYl')4UR%=7-<r<XHL5DOj&<cEqd[@&nr>Oj3#)Yo0UYkobN!gD^_hV$CaBGs/=g[64TIA[Ka;Rn/jJQ,R>hP*pGMI$pr(=-^M"%2/Oe2:(3O%D6U[MoN"Me].<'YKJhSaK.VO:8i*7(UT"r(I,Qn)ZdZe:^i$CC?77Kjg!)Ro]hgsTN9bV<H_CH2Mq`B+9;+UHd<)uqcjGK2"/.D1%=#.#lSeVUPZ.ohB!mgc#p`p^`"b,Xjg3>lQ_OV'gUSMqm:C?")TJIWO^k(pG'.b)Iae0*Rf1:WJ1qdOC;E-iSN?j/HGo)qJM'a.#%pY`WF4jrR)K,Yn$RiR7WL$=VmG(+EHces8m;<'h'0V6,ZN[*3jG8JT`I`E%$8T*Q+>^.o/&"&.;*:?A]D21VSS5X.4L_#*dD$I:Y%0s;+>c7?eSS&)mX=hbKj`=2iOd8/%;$mn&r<c!0kp>ktEFi,Z#D*7+/0%'M@]cROWGC-`IMcHHo-(4T_HaCs^<YjisbMI%kpq/^A%d<(k/SYKl\^ML@'&9YD*TY8`<3But\m3b,2U_ASNGBVPs\#'>J5PZ*i$fH*&1GN(&(/UW=-"6gqVe"kZ"L6Krk2XaJf"S?hG(+MP%^9=:ECKji:7]h]JZS1*ub$s]cOMSA`h[Fn,HfEV-:ZBhL&l4F3/(0]:2_GD61PZ,+]KQj2&kj;Y\.`s#G=c2sM<$pCc65L@Mdr*,%2+?nO]E&<n,BO;K%(]$Kag#ukSX&]X$,7AQA.WCIF&m<##`7:)JC"(UF@Jcp_c5!5emgZR;A0=Mak1WE)`?lRA.]9mF>Oa6Tj<Yn%6*$JaoDW19)^Bt[?Ni51_kg;T,J3heJ^$^j7L!4=iQXmu7L!4=iQXmu7L%CePaWI*2)<+0N!s6^jM:I+?c:$YGRsdSi01HZ0pdZI%.jG.V7d&#)#"F=deGqV-O[3Wl?j9/_N=9?IJ"c?9'-fmE>.Qp9j)[c:^iHj@Ta;3f$tNqSd%LaUN!rCh>i<s3#=\pM9j$o3":%C#%-BmE"Pdt:qi2RMb,6R4hGC^7$7L#r"GSTFMC1L.giQStQXc3a-,B-kMXGmY@G/9XcI`9AnD_V+&Xif=qBB$VSprIbuAFR,;P+L.D%J1\ILF=2]UAFKb."\I$SAFKaCGVas/mH31nL;QuBO0c&M'm`.jKBbO5m)S1HOTB,h@qP5[aD`F4fU#IG\!i^&I`9BY<u/H:iE(sH%gqFU91,C[VpSTqfpI5?<q0sj]5rCEjH2lLU*`O?d`4c.Ngk0?Pi)b<t`BC<E.u!PF[?4nK5?T]r^muYUDi>+2k:6CaOTBe=>F`1`%NKHLKB0gp7i4LA`6R)]<?.c5J(,dpU$"Mr;i5WiWC[1?/1g'3/SrJ[;\t)5"4J%Ok%+Gg=6]Yk),6RIh2"tQ`eAra^p>gK=S4$FJ%"uD13[mgSaV7(%SKXHrY(UWmI0JG8TVpjtG.jG.Z0UBE]hA@-7VW?tZ$:[Jh3,s7[kt^(HKqL@P1E%,KBZ-!f-SlYY)18$Jb\1Nt%n--KhRF0*s^ti1snRXtm3k(4P]rNqE@"3V5?NtG-$u0%1pSTI=$Sq#%j!&$^g;rbHKd2CPZY-:?qD*;*A0>O@/9Dl$"7b:W>5L(j%Y/J>s7L$MOSbjZjVa^m9U\bi\IaiU.]0;(rWKDbtMt<.b@R<:<pULXlm.B0h14U?c&M,f;O[43^jGYaE2b""uPd$Qa=I.?\U,Dla%,6N0V>PU%!@q9Q@$#+!^&70:$E<dkon<PT.r?#%2o`]iks&%;aI)4_3IoLOpA\V,'F(K2=[(D_*j6>T#V_b9[4pP9/j)B0Wiau8n%5C_$&?o+?>mfi*Ts.d`HRRgkr>(bjF(6i+PH8d92G9R:3a"2aup&;TK)amZk0!<W[LY"\b6G-VBcMNZW8CoIc&.4)j'Rn][3=l_*%/%VCSPHB'HU0>K5mWe;LM[FdA.GR!7A%RRVVm@6Y,(1O.4'<LHa\CZq9p&n7f&U=L_kGrO^ClU%g2Jl1<Z];VW&>X"o_qlRMJC$0%cf$mc3&1#GD2`9j/:s?pEFLX)/'_;'F1Q!/Fff4-4bLiA_ejKN=+?siU5.KF'%0E+^9<a27(4F>(G68Vnd_NQDH(:KQfTo(KL;SP%8gI&`ZIi8^gVq(4fS0^@Z01V8^dXI[e[AG:*#HgN5a>XYBmnloYuuA04VF7#Ps*XTe$Qq?RL6I-`Zs/\]!fUa\V(Zb-r%T?5F,H[%kms[@r,84V]:.GHrnj[ns#[,nYXA$u3E7;9kfW&3`Z-dTA0[G&K&;:E)U_'+BME?f:lAsP[/-P@Yf^geXu)3+9-`l]/'=ofaLXsM%*!F9_IE(nC.nE.Fg$/1mB7glnRcd3C[J!<*p7Jnk<OZN**$5LaPK#4U.^@P#2pFq:DRGm_#do=R+SIU=%)e(PlQS+Ds)]*ea*>q2%_^$#G@1onE_X<50#NEQZ_TqHaHd1hU-QqoUXRgDb;n0hnBcAHsdYS4q%FqsY*#b9gX6U9"3(masG,*dXS@tDEWnBuBgpKE"%\pcU%BFD*?:-gL=[q<ncrWdi/#D)Z!rmcRE0L!+dCN"IIQf$VtVPcBNnjYJP&&9hf!^]#*0=Xk"9<-u;YOahP,2=3hpKqtD#]]0MEs'L;%!#,=)]R'44S^efc817)7C\$c6GRMgP.%m3uX#!u2`n,^VW>_&s&>.+QDSB.+4qdYh,h]^iW;oe,X_!1Rlp9gTEL=iR@]e.KAO9qj%I1<VESf-K/obFOMMe\5?,g]7fZ2Mk!DFT2D-%-CnfKcP5N?^:db7N0s]cl61^d"[DmDB5./19).[A8B\601m=pg.&Y&&LFO5A@&;%WWuBBF;S#&qB4&cT!N8;OQ6G[nqR8X3C(:M'>^-cEJ.-$$GE_2a"\Y)O_Q=q"I<_?cR7Rg=TS7'\D?^X`#LAsDP+hmZNqYjM^G;L%i:\]k1,W.="Y*DZ8*$a$\>p8?;pLPn8]Bic*h_nZ(>Cs`_Sr71jc*hfnV?M(+M5`D*)FDnj"epK_sr?U][TZ'TN-.+r=JE&E416Y%)_g%HlAW]3\$j-K.Eu5FK(luBbK>"ggmT@3&f&#iq?B`e"*g!N':F\l056EDB+e"(+Y')q?W$)PBh-8<jkAicKX);d%D6roFsMXA%?KLRDC4iZ:)D>oA7=u#l$a=5opBjmm/hSHd2(jbh9&Z:"V@q*S81'n_dU(H7_Ut[E,E,+$">sDp#d>\\%H$Y)rP3rc<!]XT:S>[%%W'G@8<P[DrM:Le?")]f3>oYX?m>IRj[^+Msjk&s1$_/i]V=%6r#.LLX.f9o[Ce?"`,WJ*e=5Sjd#WlK7^>o6;bEpJM;uU#obkmUe%dr'MS1?s7/qYlk#h3T\\M;hOM25lMgmE>4\PKKOYmBug)J&.a.?Bk3XEp63.3G>i!0sZRuSVaYF.Z%uM>u(a4nt*%7mk15N2Ce14%h3NMh(7'/'"7bFjdcgh\Xm_67q"R#pLjaFXkk.(NLe\<oJ_8@e,nLlQ,`p%iNI&G<)3KX"IAV5'&V$nlZ8])9i[93;Ks^YVN"(jB%G7O3(Xk`?a9qjPU:L.$lO7u!&^34^'gFR5#Z"3"*aA`8?WHSF3:unT6L!u2K^MX.YlfTa4r69($'Q5Ngs7YD]*U0-c.I-TkF!09&%D?]%uZc>><RE01"+4uUlA1*/q-tW7#f#Y_J9(.o+DekhdBhKi=,i^o;Dkg)OU/E2dM.g#sF&IrcJ\RNbR*u\jMb/'#LYlW-N1`$"%8]M8i!3nq#K)p.)>^Z7/['kCm`B^g6#N3PPetJ`<q!./K]S@*]CIZOam<^teFk:DK's.am=(o=M+"!sTWh0P>GbT:u\:,_ifb&\.%os>.Yi&'2%4l)#H;;a*+`[[mA$(QjPQ`'!J=Lglmd=S""UfbPgIBqNOKi\mqW^Y_1`Q3dUUb&Z)iI-m9X;]j>iV2nUVKP:-&9Fog%cBC`Z.1s/+C7[\T4M1TSeTkqZBDU_W3gn>.\a[<6,,L8^[C*Z(?AYPqqd5<L$P(f11Hk6A_Y-NfKg<6:K,crVhVSd\_V:C]Cql]W%HU<9Sh@[/oqH1[r#n_<o]bmbe:/(+MKiG`aRICco:UY_flR>HXfe?RCYPglR<m9AB5nqVPS\Po,=V8EhYfH0G$mR:U\Xb"%,1;;_%U=c]*D$DdA!!"\k&ctoonCgSZpF'ih_^bC1>4C*TPVr8e.X&'I&c-O0i7628c"(C8@j#/.+Jdm)[LEr!$lYXs';C[Ws%'e:(fg62%jC]#RgWPt]eR19%)M.L5dd8A3NZO)&!0b;mobh3Qc6rC#5;^+C)d4a[*1Y-JF?cOg45d1T3%ZfjNKjQ?FToQ3QAX0*WSM$E?H9c?%M"&%;33%0IIY::LK^4<^GHs8<U9r-b+BVgHYQC8o\cSOj;N`OsXPMGrDBVfC%q]?KiaB/%k)e$m2ABZtA80X[/F@>>m%!^15i((;%V,g/]/=J7Yk]JBQ#](*gk_O,XpWc'e$io3$!6YMLhRtu4E(?];\QsY_MCQ*Yqgt:6jY9W#gi8D9FI8#<S3?[;rO\Vp0pmhpkn:,*%H#a&Ql4UJd:)t<``so'd]+#13<E.sU'qt3d!TOJf)L>UJImcUQ<@=p-*?63'LSE^p7tL;PL/EIk5CCd%!O[\Q_KTn=OK]t18;IC-%!j<"9WMGCQB[+#D!mkH;N06ntY[.%l1F,A?)@AWb.k%'U@MI04iDG-#o8Sj93FUE%%B)f'UrEqG:?V\M`_6ZM'L&2QZ/HjO8h>Br%0dJ%(VK;f2M`$7.K#hA_-R?D+?Z;luYBIue&MjTL^VdVaHpMsFi5;;u35V++pfe:q(Q9urNV>afAlO;@.kQZ--fXR+JI>k43"Y&[%=?!Ai8X65r,R'='%Z5Mf&PS+%:]NnlXaPp>iGRY,CKUY#0K)A\-]uC%:_#t2hnbrkLSFl#l'R)]i6aK!`K_:L)i_kWZ!)\UckUVL%!RFn8;A`p8&/Ec.S5LZprL"jaA\f.I<`<=PAP^5JN0ihA,un,\Q6Qnbq1m.M'WWq4=o/i^I,KDHb3(ikMD396H&lF#9Sa%8=Ws[A%S8^6tk+c/\8B"RIRqm!._h&Pa_:+dcLu">ej?h\TNRn;&A+L!9EAqqe3c+tq0mtS/SqDr@r7b'/L6J*hSJT[Yai5-dOhiH9=GZ",%RBiDi*R;aYHR^V%f_nG-ScasTZ/0KYmC8)@3EY`0^`(ma4U:9n#<_i(lo@HcG9$ApRRQoiXEPYW04+!*=RS6%mM.^A2dj6.7cjRn%GK+s?%hVfb+io\^n*EE?]+EJ4odfnNl7R`c+'Rgc5(pKT_<hn^]+9Ik(Ub8hWr3^Je_gf>;9D=S1*&]9oLl1^dHM`2rj50Zd80`J%kT>1ao6sQZq5&0OrCB<@iL;KRoD6G1s01r"^*JW38Ysn+F9_]`k`<IY8[h3F=*k[3_,'X9TY0Ui&8I3oJoW)4)"omp:^^WXK"m-@%hu:[jitH+VkiX&[@imj]Tqq_`;uS$A_is"s6-aNnjQQCp=_Q>/r_B.&*hmcOmUGsbn'cL@l_EVVT0Q$qS\&_e$+M2,H'.R01ZKP:%T&fjDYlFE/[Nh_uW#3ZQU$kAHSP#g,PDHuc(s\T:X:@087]*+!W0<(&/BV,K0-oVcPY[/2+d:)7MBIf0%-i9cS^.SpSAE*[&J^0-%7.;;ojLd^B_@8coJYtlm"XM69Q3^8;;9:8f3@,uLUuiAV7$1,A?5M/DQ&KIlPaE$1EgAS?rW6Kg$6bZVShD38="*\\IgJ+gM-QO8%'\^Sr)uL(RStTXh#9T^(6\h1l4\K;\A2U!tnk!R[M<0rNHm6`]Wqf&K:K6qjChbRDRK"Sn00qCj9V)f46;$@hUjja,@#e5H;Nc+b%I6kl4c%oL,JgVV(cK6M\5A<A3JUu`N!tn!+JgVV(6;8gMr1j?b.0bAO*[Kn_RY)ss.)d*cT/7Z6cTq!<K;:&64FY_/A;PlqM$Jl_%ep.+g!@d4Ip#m,Zep.,2K,!\;OXoTT*od8J/:e[/Oe=sGML;=,hkbTX$5<@Q8nFEtO9`@ZjXaFN&csC=QjQi>9-[OgNukSe!AOVK%Y'iN2R$<]\BYGjI#/$&>i5S<E>Y7CK`ADJFJ1Ad=!/E=[BgtdJEmB_HN]<<>8LgG:&^Tq\N`.5L:U1U.-#f$)paV%:P/7N>__Wor%_FZ5'-Ho-A,Sa1.8D&I.EN4QOY7."n.%I(W>p5bk<!pZfT1;7%i,U9:Un[#ljCN;#RY0c[:*jkBMPNKQVc#M566o0E=e&+B,Sfj8%+CO%OE1De>.V8t,&i`Gt=Xo-ce9'7pMR[43:/WB;#Hj''$+ltqF9\WU3(ZQb&eP0JN`2)<AuPo.;Iuqqp(TJ]74Dc9?uV9dSl<-W%$HK-E/Y\3/6fB:*h?/XEE$Bq]aC]C.'M_QRaN>q_R0Xd*Sp[-X"+ue:oULM4#03]'R*B039&Ls0hSZXW_FZ3q=UCE[iA_R3T.$OT%.Y3d_oULX/1,ol4BhHna:/V8L?3\HL#lB9.(n@D=a9!\+*2fYN756bn"mWsM;^t54?m:rc30h9N.N2GPBeq`2iFlcn,aH/:.XKD#%E[`!+MXZRO6/a((4f<79'TQ)q,hk%B0fVai=YD1naNbd+NP\7:88KJJF%U:i%cg5#V\1s\7IT>ZGe,&;S;NV4Oso9g![jri=+D>/%S7jeD3K7#W$7Dh:3=d@\i&ES'n)4m-S>="Y!khu\P)<dH:;Eh3:?K>KlPkPA<:l^#mA4clMYKQUI*CLo'g:`")^l](8haW2g*iJe%MLJ^DGps`2U:Eu6E/uH<U`p\0WLCZF`118gTl?0PVHYTq(`Z>lLg$T*`YjJo<-X.(0K;fr@kD,H@W7J[q4XWJ"\pn)*:3o^P>jpR%G_?nRV]n,E@qim>,ZR>&iS#\"V]r)n@@C_GP)>k$BJMPB9nB1$o27P>9sIY)-Y`s6`\SKbP>q15BnsNE.]QLg&r+4o.U'n*S5D7;%(&U=*4U$jEd>SOAe5P9N<FD2iE1ADR=U>d;;Lo1*ZP]3G:l#H($)\Cq8O^rC$0tRoN`2(?#J+hLJWj(*N9Q\FE@R[j=iMaa3(]BK%0,P\,U=i]c;E.ZSH6K$RALu.ES>^So):+c\:/]IqQDk:Q;is72`gFS6.N6tSDAe/g<2@j]GiiRVOt'Da@;q_d!@?lJWiXPWbRfF0%(nBfY0X>D_RSl+1'S-UI#"mf5'pN/iM_I+^7IOeAeg[,b_T7m>!f'`OB/$YG0MY$!+q(5F.&8!m.Z69G!-+Gm?`$)i&#34qCe'%9%%9=%%NrlT_Q(^5a"VUKf[[R>Tg-[//"VPqY21]F-MYMghK8?oE![Ntq+)&%%J;2de`n%Pr(+q@:4.Du@GX_`t*;"7EJ@0KnIk,;$%.n*^eC(t[1oSOhF.Z1`,a9iVuWcD%JU501;Wed]*GFg8-'[@D48PDuM>Z$m9#h'D7S13H\OJRiE;?Bn+do6pGkbJ6:2@-(L!b[BM%m3IB9ME'i>Kel/f[#Dg97@^4^9$9KIQ@oZF`*"Q<gA*R*_u\-tEA9+$76F?\:f+OhAAmD`,*!B`#$2N/>_X]e<'eBYG"t_eKI9kK%72s9nM^FX^P33"GP#LHGX5%th--oLPJ]aN^<:W/LP*7@E>Z&Tt__S`rP*>lA\>#/LF%dlmr;i1Qj:tYu$EMqbHPEW]j9-\AY,LE+%RE4<D8re8Bi(PG`KG7A,BobRA-;#811R4J,-\F4?S1N&)S>kS&Af7,<jFhFgS>kQ^<\bLs;9;CV.9o`l0n("1WT8`Q(n@Sd&f.DS%c;\gNoaK,FEnW8UB.>nRGmqttEl);pc;\fj$\&@^<UqtHaX&G8604u$3e]ATS@4d$'pW$5.QM8tW8&"d1)QO\jAa*pE()(>Z;`,O%<*Z4/dSpQT<,uGHTl?ll96cT>i/1-e(Ej3iW8o4h_A/?+W7_lfW9!1W;otGrNE'kaWT7cnl@[6M8LZ,L<LlG;c3d5kcd9=tEasfV%_3mnjCSPjGP(PcmVna%44O$iG.8API.-4@:Wfi96-)]i;Prl%Fj=F<*ME6A?.QLMY,u.<-c^9b2S>kQLkp^R?,pt!83)dpF]^0*H%VNR-S%"g&[3L3,Cc;\fjbAmf"._1ee:mG:[Z5ch]$-PmE=&a3kWT4\WP??o^7&H+TW_-#&()5%nEaiBgE2JfIg*Cg1"_KkG-W647%WU9_$hJ@?RL4LKF"F5c-Ehae$m3IB);N[%j!J1F*8@8e&S"c_<kO",>4&0]jeA<8j8_^MN9YOdor`McJaZ>NR8'LgcjG&d:,PK4'%72+uPE]jMfUM04T9="^@85B1(F<ET'!]lF5ILZ.0j96cRr3]FT03JOC1F0::,c<sB3fom"+m;13*Emd9J`Md-X@FN`b[qkdY!]5n%H:7=##XJ]Yl`pMRUCd!,6dAep8BtkmkU[j#"XK.A$[?&"802YNa?]<8a0WoZ:0GR\O??on4U.=(nsPr/S?^dHG=Xh3,Ec,ej;-S'%+d4.6UH^bLDp:g:*KclGH6`R6W@^XbOPBiX3NBh[nj=0u_J=ULbrr`W^?=:dm,qaP9@)h#fsmMpks">+@CPVfEI=1-Q0+uU;R2M`%?S;0Rgk-6t5n!09(#Zn6n6cEE-j=jo"F-jKGaJg,TL8pZKVVQ[U/FS(8gPW3Q%ZMD'&le\a@dg&0U7=0e.NBm91V`.+YgBX`71\X%bi<XA)+sAQq!O3CF3@jkU<H7Nf"pU8YM9&jB[`m&r0+5>9MN%6ma%]"jjr_^^M!,A#M3D]^5okkOiFrb)`d&tO*o4K,3eh10<Su@%rOcEjD=E`\P%Aj^auspmbM%*\Wc-a!g9g6jfBh;YTVSX6otuHm["$rHq_Q,[E-[boDm,?X/dJU2~>%AI9_PrivateDataEnd